// Copyright 2021 The Terasology Foundation
// SPDX-License-Identifier: Apache-2.0

// The engine build is the primary Java project and has the primary list of dependencies

plugins {
    id "java-library"
    id "org.jetbrains.gradle.plugin.idea-ext"
}

// Grab all the common stuff like plugins to use, artifact repositories, code analysis config, etc
apply from: "$rootDir/config/gradle/publish.gradle"


import groovy.json.JsonSlurper

import java.text.SimpleDateFormat

def dateTimeFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX")
dateTimeFormat.timeZone = TimeZone.getTimeZone("UTC")

// Declare "extra properties" (variables) for the project - a Gradle thing that makes them special.
ext {
    // Read environment variables, including variables passed by jenkins continuous integration server
    env = System.getenv()

    templatesDir = new File(rootDir, 'templates')

    // Stuff for our automatic version file setup
    startDateTimeString = dateTimeFormat.format(new Date())
    versionBase = new File(templatesDir, "version.txt").text.trim()
    displayVersion = versionBase
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Java Section                                                                                                      //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

sourceSets {
    // Adjust output path (changed with the Gradle 6 upgrade, this puts it back)
    main.java.outputDir = new File("$buildDir/classes")
}

// Customizations for the main compilation configuration
configurations {

    // Exclude a couple JWJGL modules that aren't needed during compilation (OS specific stuff in these two perhaps)
    implementation {
        exclude module: 'lwjgl-platform'
        exclude module: 'jinput-platform'
    }
}

// Primary dependencies definition
dependencies {
    // Storage and networking
    api group: 'com.google.guava', name: 'guava', version: '30.1-jre'
    api group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    api group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'
    implementation group: 'io.netty', name: 'netty-all', version: '4.1.53.Final'
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '2.6.1'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
    // Javax for protobuf due to @Generated - needed on Java 9 or newer Javas
    // TODO: Can likely replace with protobuf Gradle task and omit the generated source files instead
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'

    //Utilities
    api group: 'org.codehaus.plexus', name: 'plexus-utils', version: '1.5.6'

    // Java magic
    implementation group: 'net.java.dev.jna', name: 'jna-platform', version: '5.6.0'
    implementation "org.terasology:reflections:0.9.12-MB"
    implementation group: 'org.javassist', name: 'javassist', version: '3.27.0-GA'
    implementation group: 'com.esotericsoftware', name: 'reflectasm', version: '1.11.9'

    // Graphics, 3D, UI, etc
    api platform("org.lwjgl:lwjgl-bom:$LwjglVersion")
    api "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    api "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    api "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"

    api group: 'org.joml', name: 'joml', version: '1.10.0'
    api group: 'org.terasology.joml-ext', name: 'joml-geometry', version: '0.1.0'

    implementation group: 'org.abego.treelayout', name: 'org.abego.treelayout.core', version: '1.0.3'
    api group: 'com.miglayout', name: 'miglayout-core', version: '5.0'
    implementation group: 'de.matthiasmann.twl', name: 'PNGDecoder', version: '1111'

    // Logging and audio
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    implementation group: 'com.projectdarkstar.ext.jorbis', name: 'jorbis', version: '0.0.17'

    // Small-time 3rd party libs we've stored in our Artifactory for access
    implementation group: 'ec.util', name: 'MersenneTwister', version: '20'

    // telemetry
    implementation(group: 'com.snowplowanalytics', name: 'snowplow-java-tracker', version: '0.9.0') {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '4.10'

    // Our developed libs
    api group: 'org.terasology.gestalt', name: 'gestalt-asset-core', version: '7.1.0-SNAPSHOT'
    api group: 'org.terasology.gestalt', name: 'gestalt-module', version: '7.1.0-SNAPSHOT'
    api group: 'org.terasology.gestalt', name: 'gestalt-util', version: '7.1.0-SNAPSHOT'
    api "com.github.zafarkhaja:java-semver:0.10.0"  // ASAP: Remove after https://github.com/MovingBlocks/gestalt/pull/110

    api group: 'org.terasology', name: 'TeraMath', version: '1.5.0'
    api group: 'org.terasology', name: 'splash-screen', version: '1.1.1'
    api group: 'org.terasology.jnlua', name: 'JNLua', version: '0.1.0-SNAPSHOT'
    api group: 'org.terasology.jnbullet', name: 'JNBullet', version: '1.0.2'
    api group: 'org.terasology.nui', name: 'nui', version: '3.0.0-SNAPSHOT'
    api group: 'org.terasology.nui', name: 'nui-reflect', version: '3.0.0-SNAPSHOT'
    api group: 'org.terasology.nui', name: 'nui-gestalt7', version: '3.0.0-SNAPSHOT'


    // Wildcard dependency to catch any libs provided with the project (remote repo preferred instead)
    api fileTree(dir: 'libs', include: '*.jar')

    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    runtimeOnly group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.21'

    // TODO: Consider moving this back to the PC Facade instead of having the engine rely on it?
    implementation group: 'org.terasology.crashreporter', name: 'cr-terasology', version: '4.1.0'

    api(project(":subsystems:TypeHandlerLibrary"))
}

// Instructions for packaging a jar file for the engine
jar {
    // Unlike the content modules Gradle grabs the assets as they're in a resources directory. Need to avoid dupes tho
    duplicatesStrategy = "EXCLUDE"

    doFirst {
        manifest {
            def manifestClasspath = "$subDirLibs/" + configurations."${sourceSets.main.runtimeClasspathConfigurationName}".collect {
                it.getName()
            }.join(" $subDirLibs/")
            attributes("Class-Path": manifestClasspath, "Implementation-Title": "Terasology", "Implementation-Version": displayVersion + ", engine v" + project.version + " , build number " + env.BUILD_NUMBER)
        }
    }
}

// JMH related tasks

sourceSets {
    jmh {
        java.srcDirs = ['src/jmh/java']
        resources.srcDirs = ['src/jmh/resources']
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

task jmh(type: JavaExec, dependsOn: jmhClasses) {
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
}

dependencies {
    jmhAnnotationProcessor group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.27'
    jmhImplementation 'org.openjdk.jmh:jmh-core:1.27'
    jmhImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.27'
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Version file stuff                                                                                                //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// First read the internal version out of the engine's engine-module.txt
def moduleFile = file('src/main/resources/org/terasology/engine/engine-module.txt')

if (!moduleFile.exists()) {
    println "Failed to find engine-module.txt for engine"
    throw new GradleException("Failed to find engine-module.txt for engine")
}

println "Scanning for version in engine-module.txt for engine"
def slurper = new JsonSlurper()
def moduleConfig = slurper.parseText(moduleFile.text)

// Gradle uses the magic version variable when creating the jar name (unless explicitly set differently)
version = moduleConfig.version

// Jenkins-Artifactory integration catches on to this as part of the Maven-type descriptor
group = 'org.terasology.engine'

println "Version for $project.name loaded as $version for group $group"

// This version info file actually goes inside the built jar and can be used at runtime
def createVersionInfoFile = tasks.register("createVersionInfoFile", WriteProperties) {
    //noinspection GroovyAssignabilityCheck
    properties([
            buildNumber: env.BUILD_NUMBER,
            buildId: env.BUILD_ID,
            buildTag: env.BUILD_TAG,
            buildUrl: env.BUILD_URL,
            jobName: env.JOB_NAME,
            gitCommit: env.GIT_COMMIT,
            displayVersion: displayVersion,
            engineVersion: version
    ].findAll { it.value != null })
    if (env.JOB_NAME != null) {
        // Only set the dateTime property when there is a Jenkins JOB_NAME.
        // It is a value we can always get (on Jenkins or otherwise) but we don't want local builds
        // to invalidate their cache whenever the time changes.
        // TODO: after upgrading to Gradle 6.8, see if we can have it ignore this property specifically:
        //     https://docs.gradle.org/current/userguide/more_about_tasks.html#sec:property_file_normalization
        property("dateTime", startDateTimeString)
    }

    outputFile = "$buildDir/createVersionInfoFile/versionInfo.properties"
}

tasks.named("processResources", Copy) {
    from(createVersionInfoFile) {
        into("org/terasology/engine/version/")
    }
    from("$rootDir/docs") {
        include("Credits.md")
    }
}

//TODO: Remove this when gestalt can handle ProtectionDomain without classes (Resources)
task copyResourcesToClasses(type: Copy) {
    from sourceSets.main.output.resourcesDir
    into sourceSets.main.output.classesDirs.first()

    dependsOn processResources
    mustRunAfter compileJava
}

tasks.named("classes") {
    dependsOn(tasks.named("copyResourcesToClasses"))
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// General IDE customization                                                                                         //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

idea {
    module {
        // Change around the output a bit
        inheritOutputDirs = false
        outputDir = file('build/classes')
        testOutputDir = file('build/testClasses')
        downloadSources = true
    }
}

// Make sure our config file for code analytics get extracted (vulnerability: non-IDE execution of single analytic)
ideaModule.dependsOn rootProject.extractConfig
tasks.eclipse.dependsOn rootProject.extractConfig
check.dependsOn rootProject.extractConfig
