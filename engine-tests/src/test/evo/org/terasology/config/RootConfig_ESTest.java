/*
 * Copyright 2017 MovingBlocks
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 22 21:34:10 GMT 2017
 */

package org.terasology.config;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.gson.JsonElement;
import java.util.Map;

import org.junit.runner.RunWith;
import org.terasology.config.AudioConfig;
import org.terasology.config.InputConfig;
import org.terasology.config.ModuleConfig;
import org.terasology.config.NUIEditorConfig;
import org.terasology.config.NetworkConfig;
import org.terasology.config.PermissionConfig;
import org.terasology.config.PlayerConfig;
import org.terasology.config.RenderingConfig;
import org.terasology.config.RootConfig;
import org.terasology.config.SecurityConfig;
import org.terasology.config.SystemConfig;
import org.terasology.config.WorldGenerationConfig;
import org.terasology.engine.SimpleUri;


public class RootConfig_ESTest{
  /*
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(Integer.MIN_VALUE);
      RootConfig rootConfig0 = null;
      try {
        rootConfig0 = new RootConfig();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }*/

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RootConfig rootConfig0 = new RootConfig();
      AudioConfig audioConfig0 = rootConfig0.getAudio();
      assertEquals(0.0F, audioConfig0.getSoundVolume(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RootConfig rootConfig0 = new RootConfig();
      NetworkConfig networkConfig0 = rootConfig0.getNetwork();
      assertEquals(0, networkConfig0.getUpstreamBandwidth());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RootConfig rootConfig0 = new RootConfig();
      RenderingConfig renderingConfig0 = rootConfig0.getRendering();
      assertFalse(renderingConfig0.isVolumetricFog());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RootConfig rootConfig0 = new RootConfig();
      InputConfig inputConfig0 = rootConfig0.getInput();
      assertFalse(inputConfig0.isMouseYAxisInverted());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RootConfig rootConfig0 = new RootConfig();
      SecurityConfig securityConfig0 = rootConfig0.getSecurity();
      assertNotNull(securityConfig0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RootConfig rootConfig0 = new RootConfig();
      Map<SimpleUri, Map<String, JsonElement>> map0 = rootConfig0.getModuleConfigs();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RootConfig rootConfig0 = new RootConfig();
      SystemConfig systemConfig0 = rootConfig0.getSystem();
      assertEquals(0, systemConfig0.getMaxSecondsBetweenSaves());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RootConfig rootConfig0 = new RootConfig();
      WorldGenerationConfig worldGenerationConfig0 = rootConfig0.getWorldGeneration();
      assertNull(worldGenerationConfig0.getWorldTitle());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RootConfig rootConfig0 = new RootConfig();
      NUIEditorConfig nUIEditorConfig0 = rootConfig0.getNuiEditor();
      assertFalse(nUIEditorConfig0.isDisableIcons());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RootConfig rootConfig0 = new RootConfig();
      ModuleConfig moduleConfig0 = rootConfig0.getDefaultModSelection();
      assertEquals("", moduleConfig0.getDefaultGameplayModuleName());
  }

}
