/*
 * Copyright 2017 MovingBlocks
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 22 21:22:41 GMT 2017
 */

package org.terasology.config;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.runner.RunWith;
import org.terasology.config.ServerInfo;


public class ServerInfo_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo();
      int int0 = serverInfo0.getPort();
      assertEquals(0, int0);
      assertTrue(serverInfo0.isActive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo("[9?yv6(}>v4&-MsQXB", "[9?yv6(}>v4&-MsQXB", 0);
      serverInfo0.setOwner("jYTT");
      serverInfo0.getOwner();
      assertTrue(serverInfo0.isActive());
      assertEquals(0, serverInfo0.getPort());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo();
      serverInfo0.setOwner("");
      serverInfo0.getOwner();
      assertTrue(serverInfo0.isActive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo();
      serverInfo0.getAddress();
      assertTrue(serverInfo0.isActive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ServerInfo serverInfo0 = null;
      try {
        serverInfo0 = new ServerInfo("2OV,+t;AAJxz[4&(Z", "", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server address must not be null or empty
         //
         //assertThrownBy("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo();
      serverInfo0.setPort(1059);
      assertEquals(1059, serverInfo0.getPort());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo();
      serverInfo0.setAddress("X+FhN[m]Y");
      assertTrue(serverInfo0.isActive());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo();
      serverInfo0.setName("6YrA");
      serverInfo0.getName();
      assertTrue(serverInfo0.isActive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo();
      // Undeclared exception!
      try { 
        serverInfo0.setPort(65555);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server port must be in the range [0..65535]
         //
         //assertThrownBy("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo();
      // Undeclared exception!
      try { 
        serverInfo0.setPort((-355));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server port must be in the range [0..65535]
         //
         //assertThrownBy("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo();
      // Undeclared exception!
      try { 
        serverInfo0.setAddress("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server address must not be null or empty
         //
         //assertThrownBy("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo();
      // Undeclared exception!
      try { 
        serverInfo0.setAddress((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server address must not be null or empty
         //
         //assertThrownBy("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo();
      // Undeclared exception!
      try { 
        serverInfo0.setName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server name must not be null or empty
         //
         //assertThrownBy("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo("^wW;{w:oPDDLBY[K", "^wW;{w:oPDDLBY[K", 65535);
      // Undeclared exception!
      try { 
        serverInfo0.setName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server name must not be null or empty
         //
         //assertThrownBy("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo();
      boolean boolean0 = serverInfo0.isActive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo("[9?yv6(}>v4&-MsQXB", "[9?yv6(}>v4&-MsQXB", 0);
      serverInfo0.getOwner();
      assertEquals(0, serverInfo0.getPort());
      assertTrue(serverInfo0.isActive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo();
      serverInfo0.getName();
      assertTrue(serverInfo0.isActive());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo();
      String string0 = serverInfo0.toString();
      assertEquals("ServerInfo [name=null, address=null, port=0, owner=null, active=true]", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo("Oq)*yx", "Oq)*yx", 210);
      int int0 = serverInfo0.getPort();
      assertEquals(210, int0);
      assertTrue(serverInfo0.isActive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo("Oq)*yx", "Oq)*yx", 210);
      serverInfo0.getAddress();
      assertTrue(serverInfo0.isActive());
      assertEquals(210, serverInfo0.getPort());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ServerInfo serverInfo0 = new ServerInfo();
      assertTrue(serverInfo0.isActive());
      
      serverInfo0.setActive(false);
      boolean boolean0 = serverInfo0.isActive();
      assertFalse(boolean0);
  }
}
