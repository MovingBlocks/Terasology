/*
 * Copyright 2017 MovingBlocks
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 22 21:09:19 GMT 2017
 */

package org.terasology.config;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonObject;
import com.google.gson.JsonSerializationContext;
import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.List;
import java.util.TreeSet;
import org.junit.runner.RunWith;
import org.terasology.config.BindsConfig;
import org.terasology.context.internal.ContextImpl;
import org.terasology.engine.SimpleUri;
import org.terasology.engine.module.ModuleManager;
import org.terasology.input.Input;
import org.terasology.input.InputSystem;
import org.terasology.input.InputType;
import org.terasology.input.Keyboard;
import org.terasology.input.UnknownInput;

public class BindsConfig_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BindsConfig bindsConfig0 = new BindsConfig();
      SimpleUri simpleUri0 = new SimpleUri("", "2J");
      Input[] inputArray0 = new Input[9];
      Keyboard.Key keyboard_Key0 = Keyboard.Key.FUNCTION;
      inputArray0[0] = (Input) keyboard_Key0;
      bindsConfig0.setBinds(simpleUri0, inputArray0);
      boolean boolean0 = bindsConfig0.isBound(keyboard_Key0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BindsConfig bindsConfig0 = new BindsConfig();
      SimpleUri simpleUri0 = new SimpleUri(",U# VSj#Azsnz>%S");
      Input[] inputArray0 = new Input[2];
      bindsConfig0.setBinds(simpleUri0, inputArray0);
      // Undeclared exception!
      try { 
        bindsConfig0.setBinds(simpleUri0, inputArray0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BindsConfig bindsConfig0 = new BindsConfig();
      SimpleUri simpleUri0 = new SimpleUri();
      HashSet<Input> hashSet0 = new HashSet<Input>();
      hashSet0.add((Input) null);
      bindsConfig0.setBinds(simpleUri0, (Iterable<Input>) hashSet0);
      // Undeclared exception!
      try { 
        bindsConfig0.setBinds(simpleUri0, (Iterable<Input>) hashSet0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BindsConfig bindsConfig0 = new BindsConfig();
      SimpleUri simpleUri0 = new SimpleUri();
      // Undeclared exception!
      try { 
        bindsConfig0.setBinds(simpleUri0, (Iterable<Input>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BindsConfig bindsConfig0 = new BindsConfig();
      // Undeclared exception!
      try { 
        bindsConfig0.setBinds((BindsConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("org.terasology.config.BindsConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContextImpl contextImpl0 = new ContextImpl();
      // Undeclared exception!
      try { 
        BindsConfig.createDefault(contextImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("org.terasology.config.BindsConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BindsConfig bindsConfig0 = new BindsConfig();
      SimpleUri simpleUri0 = new SimpleUri();
      BindsConfig.Handler bindsConfig_Handler0 = new BindsConfig.Handler();
      Class<Character> class0 = Character.TYPE;
      Input[] inputArray0 = new Input[10];
      bindsConfig0.setBinds(simpleUri0, inputArray0);
      // Undeclared exception!
      try { 
        bindsConfig_Handler0.serialize(bindsConfig0, (Type) class0, (JsonSerializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("org.terasology.config.BindsConfig$Handler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BindsConfig bindsConfig0 = new BindsConfig();
      BindsConfig.Handler bindsConfig_Handler0 = new BindsConfig.Handler();
      Class<Character> class0 = Character.TYPE;
      JsonObject jsonObject0 = (JsonObject)bindsConfig_Handler0.serialize(bindsConfig0, (Type) class0, (JsonSerializationContext) null);
      assertFalse(jsonObject0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BindsConfig.Handler bindsConfig_Handler0 = new BindsConfig.Handler();
      JsonObject jsonObject0 = new JsonObject();
      Class<Long> class0 = Long.TYPE;
      jsonObject0.addProperty("MIN_VALUE", "MIN_VALUE");
      // Undeclared exception!
      try { 
        bindsConfig_Handler0.deserialize(jsonObject0, class0, (JsonDeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("org.terasology.config.BindsConfig$Handler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BindsConfig bindsConfig0 = new BindsConfig();
      Input[] inputArray0 = new Input[5];
      bindsConfig0.setBinds((SimpleUri) null, inputArray0);
      TreeSet<Input> treeSet0 = new TreeSet<Input>();
      bindsConfig0.setBinds((SimpleUri) null, (Iterable<Input>) treeSet0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BindsConfig bindsConfig0 = new BindsConfig();
      SimpleUri simpleUri0 = new SimpleUri();
      HashSet<Input> hashSet0 = new HashSet<Input>();
      InputType inputType0 = InputType.MOUSE_BUTTON;
      UnknownInput unknownInput0 = new UnknownInput(inputType0, 2147483645);
      hashSet0.add(unknownInput0);
      bindsConfig0.setBinds(simpleUri0, (Iterable<Input>) hashSet0);
      bindsConfig0.setBinds(simpleUri0, (Iterable<Input>) hashSet0);
      assertFalse(simpleUri0.isValid());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BindsConfig bindsConfig0 = new BindsConfig();
      SimpleUri simpleUri0 = new SimpleUri("", "2J");
      boolean boolean0 = bindsConfig0.hasBinds(simpleUri0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BindsConfig bindsConfig0 = new BindsConfig();
      SimpleUri simpleUri0 = new SimpleUri();
      Input[] inputArray0 = new Input[10];
      bindsConfig0.setBinds(simpleUri0, inputArray0);
      boolean boolean0 = bindsConfig0.hasBinds(simpleUri0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BindsConfig.Handler bindsConfig_Handler0 = new BindsConfig.Handler();
      JsonObject jsonObject0 = new JsonObject();
      Class<Byte> class0 = Byte.TYPE;
      BindsConfig bindsConfig0 = bindsConfig_Handler0.deserialize(jsonObject0, class0, (JsonDeserializationContext) null);
      ContextImpl contextImpl0 = new ContextImpl();
      // Undeclared exception!
      try { 
        bindsConfig0.updateForChangedMods(contextImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("org.terasology.config.BindsConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BindsConfig bindsConfig0 = new BindsConfig();
      Keyboard.Key keyboard_Key0 = Keyboard.Key.FUNCTION;
      boolean boolean0 = bindsConfig0.isBound(keyboard_Key0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BindsConfig bindsConfig0 = new BindsConfig();
      InputSystem inputSystem0 = new InputSystem();
      // Undeclared exception!
      try { 
        bindsConfig0.applyBinds(inputSystem0, (ModuleManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("org.terasology.config.BindsConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BindsConfig bindsConfig0 = new BindsConfig();
      List<Input> list0 = bindsConfig0.getBinds((SimpleUri) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BindsConfig bindsConfig0 = new BindsConfig();
      bindsConfig0.setBinds(bindsConfig0);
  }
}
