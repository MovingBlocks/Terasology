/*
 * Copyright 2017 MovingBlocks
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 22 21:32:38 GMT 2017
 */

package org.terasology.config;

import org.junit.Test;
import static org.junit.Assert.*;
import java.beans.PropertyChangeEvent;
import org.junit.runner.RunWith;
import org.terasology.config.RenderingDebugConfig;

public class RenderingDebugConfig_ESTest{

  @Test(timeout = 4000)
  public void testRenderingDebugConfigIsRenderSkeletons1()  throws Throwable  {
      RenderingDebugConfig renderingDebugConfig0 = new RenderingDebugConfig();
      RenderingDebugConfig.DebugRenderingStage renderingDebugConfig_DebugRenderingStage0 = RenderingDebugConfig.DebugRenderingStage.LIGHT_SHAFTS;
      renderingDebugConfig0.setStage(renderingDebugConfig_DebugRenderingStage0);
      renderingDebugConfig0.cycleStage();
      assertFalse(renderingDebugConfig0.isRenderSkeletons());
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfigIsHudHidden1()  throws Throwable  {
      RenderingDebugConfig renderingDebugConfig0 = new RenderingDebugConfig();
      renderingDebugConfig0.setHudHidden(true);
      boolean boolean0 = renderingDebugConfig0.isHudHidden();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfigIsFirstPersonElementsHidden1()  throws Throwable  {
      RenderingDebugConfig renderingDebugConfig0 = new RenderingDebugConfig();
      renderingDebugConfig0.setFirstPersonElementsHidden(true);
      boolean boolean0 = renderingDebugConfig0.isFirstPersonElementsHidden();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfigRenderingDebugConfig_DebugRenderingStage1()  throws Throwable  {
      RenderingDebugConfig renderingDebugConfig0 = new RenderingDebugConfig();
      RenderingDebugConfig.DebugRenderingStage renderingDebugConfig_DebugRenderingStage0 = RenderingDebugConfig.DebugRenderingStage.OPAQUE_COLOR;
      renderingDebugConfig0.setStage(renderingDebugConfig_DebugRenderingStage0);
      RenderingDebugConfig.DebugRenderingStage renderingDebugConfig_DebugRenderingStage1 = renderingDebugConfig0.getStage();
      assertEquals("OPAQUE_COLOR", renderingDebugConfig_DebugRenderingStage1.name());
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfigRenderingDebugConfig_DebugRenderingStage0()  throws Throwable  {
      RenderingDebugConfig renderingDebugConfig0 = new RenderingDebugConfig();
      RenderingDebugConfig.DebugRenderingStage renderingDebugConfig_DebugRenderingStage0 = RenderingDebugConfig.DebugRenderingStage.LIGHT_SHAFTS;
      renderingDebugConfig0.setStage(renderingDebugConfig_DebugRenderingStage0);
      RenderingDebugConfig.DebugRenderingStage renderingDebugConfig_DebugRenderingStage1 = renderingDebugConfig0.getStage();
      assertSame(renderingDebugConfig_DebugRenderingStage1, renderingDebugConfig_DebugRenderingStage0);
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfigPropertyChange()  throws Throwable  {
      RenderingDebugConfig renderingDebugConfig0 = new RenderingDebugConfig();
      // Undeclared exception!
      try { 
        renderingDebugConfig0.propertyChange((PropertyChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("org.terasology.config.RenderingDebugConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfigIsRenderChunkBoundingBoxes1()  throws Throwable  {
      RenderingDebugConfig renderingDebugConfig0 = new RenderingDebugConfig();
      renderingDebugConfig0.setRenderChunkBoundingBoxes(true);
      boolean boolean0 = renderingDebugConfig0.isRenderChunkBoundingBoxes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfigIsRenderChunkBoundingBoxes2()  throws Throwable  {
      RenderingDebugConfig renderingDebugConfig0 = new RenderingDebugConfig();
      boolean boolean0 = renderingDebugConfig0.isRenderChunkBoundingBoxes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfigGetStage()  throws Throwable  {
      RenderingDebugConfig renderingDebugConfig0 = new RenderingDebugConfig();
      renderingDebugConfig0.getStage();
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfigIsWireframe1()  throws Throwable  {
      RenderingDebugConfig renderingDebugConfig0 = new RenderingDebugConfig();
      renderingDebugConfig0.setWireframe(true);
      boolean boolean0 = renderingDebugConfig0.isWireframe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfigIsRenderSkeletons2()  throws Throwable  {
      RenderingDebugConfig renderingDebugConfig0 = new RenderingDebugConfig();
      boolean boolean0 = renderingDebugConfig0.isRenderSkeletons();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfigCycleStage()  throws Throwable  {
      RenderingDebugConfig renderingDebugConfig0 = new RenderingDebugConfig();
      // Undeclared exception!
      try { 
        renderingDebugConfig0.cycleStage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("org.terasology.config.RenderingDebugConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfigIsWireframe2()  throws Throwable  {
      RenderingDebugConfig renderingDebugConfig0 = new RenderingDebugConfig();
      boolean boolean0 = renderingDebugConfig0.isWireframe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfigIsEnabled1()  throws Throwable  {
      RenderingDebugConfig renderingDebugConfig0 = new RenderingDebugConfig();
      renderingDebugConfig0.setEnabled(true);
      boolean boolean0 = renderingDebugConfig0.isEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfigIsHudHidden2()  throws Throwable  {
      RenderingDebugConfig renderingDebugConfig0 = new RenderingDebugConfig();
      boolean boolean0 = renderingDebugConfig0.isHudHidden();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfigIsRenderSkeletons3()  throws Throwable  {
      RenderingDebugConfig renderingDebugConfig0 = new RenderingDebugConfig();
      renderingDebugConfig0.setRenderSkeletons(true);
      boolean boolean0 = renderingDebugConfig0.isRenderSkeletons();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfigIsFirstPersonElementsHidden2()  throws Throwable  {
      RenderingDebugConfig renderingDebugConfig0 = new RenderingDebugConfig();
      boolean boolean0 = renderingDebugConfig0.isFirstPersonElementsHidden();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfigIsEnabled2()  throws Throwable  {
      RenderingDebugConfig renderingDebugConfig0 = new RenderingDebugConfig();
      boolean boolean0 = renderingDebugConfig0.isEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfigGetDefineName()  throws Throwable  {
      RenderingDebugConfig.DebugRenderingStage renderingDebugConfig_DebugRenderingStage0 = RenderingDebugConfig.DebugRenderingStage.SOBEL;
      String string0 = renderingDebugConfig_DebugRenderingStage0.getDefineName();
      assertEquals("DEBUG_STAGE_SOBEL", string0);
  }

  @Test(timeout = 4000)
  public void testRenderingDebugConfig()  throws Throwable  {
      RenderingDebugConfig.DebugRenderingStage renderingDebugConfig_DebugRenderingStage0 = RenderingDebugConfig.DebugRenderingStage.LIGHT_SHAFTS;
      int int0 = renderingDebugConfig_DebugRenderingStage0.getIndex();
      assertEquals(13, int0);
  }
}
