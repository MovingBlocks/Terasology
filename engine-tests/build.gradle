/*
 * Copyright 2020 MovingBlocks
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Engine tests are split out due to otherwise quirky project dependency issues with module tests extending engine tests

// Grab all the common stuff like plugins to use, artifact repositories, code analysis config
apply from: "$rootDir/config/gradle/publish.gradle"
apply plugin: "java-library"

import groovy.json.JsonSlurper

ext {
    // Read environment variables, including variables passed by jenkins continuous integration server
    env = System.getenv()
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Java Section                                                                                                      //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Read the internal version out of the engine-tests module.txt
def moduleFile = file('src/main/resources/module.txt')

if (!moduleFile.exists()) {
    println "Failed to find module.txt for engine-tests"
    throw new GradleException("Failed to find module.txt for engine-tests")
}

println "Scanning for version in module.txt for engine-tests"
def slurper = new JsonSlurper()
def moduleConfig = slurper.parseText(moduleFile.text)

// Gradle uses the magic version variable when creating the jar name (unless explicitly set differently)
version = moduleConfig.version

// The only case in which we make non-snapshots is when BRANCH_NAME exists and contains "master" - otherwise snapshots
if (env.BRANCH_NAME == null || !env.BRANCH_NAME.equals("master")) {
    version += "-SNAPSHOT"
}

// Jenkins-Artifactory integration catches on to this as part of the Maven-type descriptor
group = 'org.terasology.engine'

println "Version for $project.name loaded as $version for group $group"

sourceSets {
    // Adjust output path (changed with the Gradle 6 upgrade, this puts it back)
    main.java.outputDir = new File("$buildDir/classes")
    test.java.outputDir = new File("$buildDir/testClasses")
}

// Primary dependencies definition
dependencies {
    // Dependency on the engine itself
    implementation project(':engine')

    // Dependency not provided for modules, but required for module-tests
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.6.2'
    implementation group: 'org.codehaus.plexus', name: 'plexus-utils', version: '1.5.6'
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '2.6.1'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    runtimeOnly group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.21'
    implementation group: 'org.reflections', name: 'reflections', version: '0.9.10'

    // Test lib dependencies
    implementation("org.junit.jupiter:junit-jupiter-api:5.5.2")
    implementation("org.junit.jupiter:junit-jupiter-params:5.5.2")
    implementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.2.0'

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.5.2")

    implementation group: 'junit', name: 'junit', version: '4.12'

    //TODO: Remove shrinkwrap from code, you have FileSystem in java 8
    implementation group: 'org.jboss.shrinkwrap', name: 'shrinkwrap-depchain-java7', version: '1.2.1'
}

task copyResourcesToClasses(type:Copy) {
    from sourceSets.main.output.resourcesDir
    into sourceSets.main.output.classesDirs.first()
}

//TODO: Remove it  when gestalt will can to handle ProtectionDomain without classes (Resources)
test.dependsOn copyResourcesToClasses
test.dependsOn rootProject.extractNatives

idea {
    module {
        // Change around the output a bit
        inheritOutputDirs = false
        outputDir = file('build/classes')
        testOutputDir = file('build/testClasses')
        downloadSources = true
    }
}
