// Copyright 2021 The Terasology Foundation
// SPDX-License-Identifier: Apache-2.0

// Engine tests are split out due to otherwise quirky project dependency issues with module tests extending engine tests

plugins {
    id "java-library"
    id "org.jetbrains.gradle.plugin.idea-ext"
}

// Grab all the common stuff like plugins to use, artifact repositories, code analysis config
apply from: "$rootDir/config/gradle/publish.gradle"

import groovy.json.JsonSlurper

ext {
    // Read environment variables, including variables passed by jenkins continuous integration server
    env = System.getenv()
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Java Section                                                                                                      //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Read the internal version out of the engine-tests module.txt
def moduleFile = file('src/main/resources/org/terasology/unittest/module.txt')

if (!moduleFile.exists()) {
    println "Failed to find module.txt for engine-tests"
    throw new GradleException("Failed to find module.txt for engine-tests")
}

println "Scanning for version in module.txt for engine-tests"
def slurper = new JsonSlurper()
def moduleConfig = slurper.parseText(moduleFile.text)

// Gradle uses the magic version variable when creating the jar name (unless explicitly set differently)
version = moduleConfig.version

// Jenkins-Artifactory integration catches on to this as part of the Maven-type descriptor
group = 'org.terasology.engine'

println "Version for $project.name loaded as $version for group $group"

sourceSets {
    // Adjust output path (changed with the Gradle 6 upgrade, this puts it back)
    main.java.outputDir = new File("$buildDir/classes")
    test.java.outputDir = new File("$buildDir/testClasses")
}

// Primary dependencies definition
dependencies {
    // Dependency on the engine itself
    implementation project(':engine')

    // Dependency not provided for modules, but required for module-tests
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    implementation group: 'org.codehaus.plexus', name: 'plexus-utils', version: '1.5.6'
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '2.6.1'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    runtimeOnly group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.21'
    implementation "org.terasology:reflections:0.9.12-MB"

    // Test lib dependencies
    implementation(platform("org.junit:junit-bom:5.7.1")) {
        // junit-bom will set version numbers for the other org.junit dependencies.
    }
    implementation("org.junit.jupiter:junit-jupiter-api")
    implementation("org.junit.jupiter:junit-jupiter-params")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("org.mockito:mockito-inline:3.7.7")

    implementation("org.mockito:mockito-junit-jupiter:3.7.7")

    implementation("org.terasology.joml-ext:joml-test:0.1.0")

    testImplementation("com.google.truth:truth:1.1.2")
    testImplementation("com.google.truth.extensions:truth-java8-extension:1.1.2")
}

task copyResourcesToClasses(type:Copy) {
    from sourceSets.main.output.resourcesDir
    into sourceSets.main.output.classesDirs.first()
}

test {
    //TODO: Remove it  when gestalt will can to handle ProtectionDomain without classes (Resources)
    dependsOn copyResourcesToClasses
    dependsOn rootProject.extractNatives

    description("Runs all tests (slow)")

    systemProperty("junit.jupiter.execution.timeout.default", "4m")
}

task unitTest(type: Test) {
    //TODO: Remove it  when gestalt will can to handle ProtectionDomain without classes (Resources)
    dependsOn copyResourcesToClasses
    dependsOn rootProject.extractNatives

    group "Verification"
    description("Runs unit tests (fast)")

    useJUnitPlatform {
        excludeTags "MteTest", "TteTest"
    }
    systemProperty("junit.jupiter.execution.timeout.default", "1m")
}

task integrationTest(type: Test) {
    //TODO: Remove it  when gestalt will can to handle ProtectionDomain without classes (Resources)
    dependsOn copyResourcesToClasses
    dependsOn rootProject.extractNatives

    group "Verification"
    description("Runs integration tests (slow) tagged with 'MteTest' or 'TteTest'")

    useJUnitPlatform {
        includeTags "MteTest", "TteTest"
    }
    systemProperty("junit.jupiter.execution.timeout.default", "5m")
}

idea {
    module {
        // Change around the output a bit
        inheritOutputDirs = false
        outputDir = file('build/classes')
        testOutputDir = file('build/testClasses')
        downloadSources = true
    }
}
