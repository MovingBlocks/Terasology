/*
 * This is a Gradle build file:
 * - Gradle Homepage: http://gradle.org/
 * - Gradle Documentation: http://gradle.org/documentation
 * - View tasks for this project: $ gradlew tasks
 */

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'project-report'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'checkstyle'

/* Gradle Wrapper: Uncomment this task, change 'gradleVersion' and run "wrapper".
task wrapper(type: Wrapper) {
    gradleVersion = '1.1'
}
*/

ext {
    startDateTimeString = new Date().format("yyyy-MM-dd_hh-mm-ss")
    dirApplet = 'applet'
    dirData = 'data'
    dirNatives = 'natives'
    dirSavedWorlds = 'SAVED_WORLDS'
    subDirLibs = 'libs'
    subDirMods = 'mods'
    destDirApplet = 'distributions/applet'
    destDirApplication = 'distributions/application'
    destDirMainOutput = 'mainOutput'
    destDirMods = "distributions/$subDirMods"
    mainClassName = 'org.terasology.game.Terasology'
    jarFileName = 'Terasology.jar'
}

repositories {
    mavenCentral()
}

/* Natives ----------------------------------------------------------------- */
configurations {
    natives
}

dependencies {
    natives group: 'org.lwjgl.lwjgl', name: 'lwjgl', version: '2.8.3'
}

task extractWindowsNatives(type:Sync) {
    from {
        configurations.natives.collect { it.getName().contains('-natives-window') ? zipTree(it) : [] }
    }
    into ("$dirNatives/windows")
    exclude ('META-INF/**')
}

task extractMacOSXNatives(type:Sync) {
    from {
        configurations.natives.collect { it.getName().contains('-natives-osx') ? zipTree(it) : [] }
    }
    into ("$dirNatives/macosx")
    exclude ('META-INF/**')
}

task extractLinuxNatives(type:Sync) {
    from {
        configurations.natives.collect { it.getName().contains('-natives-linux') ? zipTree(it) : [] }
    }
    into ("$dirNatives/linux")
    exclude ('META-INF/**')
}

task extractNatives {
    dependsOn extractWindowsNatives
    dependsOn extractLinuxNatives
    dependsOn extractMacOSXNatives
}

/* Java/Groovy ------------------------------------------------------------- */
sourceCompatibility = 1.6

// Compiles everything as groovy, due to java<->groovy interdependencies
compileJava.enabled = false
sourceSets.main.java.srcDirs.each { sourceSets.main.groovy.srcDirs it }

configurations {
    compile {
        exclude module: 'lwjgl-platform'
        exclude module: 'jinput-platform'
    }
}

dependencies {
    groovy group: 'org.codehaus.groovy', name: 'groovy', version: '1.8.7'
    compile group: 'com.google.guava', name: 'guava', version: '12.0.1'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.1'
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '2.4.1'
    compile group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.2'
    compile group: 'com.projectdarkstar.ext.jorbis', name: 'jorbis', version: '0.0.17'
    compile group: 'org.lwjgl.lwjgl', name: 'lwjgl', version: '2.8.3'
    compile group: 'org.lwjgl.lwjgl', name: 'lwjgl_util', version: '2.8.3'
    compile group: 'io.netty', name: 'netty', version: '3.4.4.Final'
    compile group: 'org.reflections', name: 'reflections', version: '0.9.7.RC1'
    compile group: 'java3d', name: 'vecmath', version: '1.3.1'
    compile fileTree(dir: 'libs', include: '*.jar')
    testCompile group: 'junit', name: 'junit', version: '4.10'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.0'
}

jar {
    archiveName = jarFileName
    manifest {
        def manifestClasspath = "$subDirLibs/"+configurations.runtime.collect { it.getName() }.join(" $subDirLibs/") 
        attributes("Implementation-Title": project.name, "Main-Class": mainClassName, "Class-Path" : manifestClasspath)
    }
}

task sourceJar(type: Jar) {
    description = "Create a JAR with all sources (main: java, groovy, resources)"
    manifest.attributes("Implementation-Title": project.name)
    classifier = 'sources'
    from sourceSets.main.output
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = "Create a JAR with the JavaDoc for the java sources"
    manifest.attributes("Implementation-Title": project.name)
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    description = "Create a JAR with the GroovyDoc for the groovy and java sources"
    manifest.attributes("Implementation-Title": project.name)
    classifier = 'groovydoc'
    from groovydoc.destinationDir
}

test {
    // ignoreFailures: Specifies whether the build should break when the verifications performed by this task fail.
    ignoreFailures = true
    // showStandardStreams: makes the standard streams (err and out) visible at console when running tests
    testLogging.showStandardStreams = true
    jvmArgs '-Xms512m', '-Xmx1024m', '-XX:MaxPermSize=128m'
}

/* Check ------------------------------------------------------------------- */
checkstyle.ignoreFailures = true
/* Optional check plugins
apply plugin: 'codenarc'
apply plugin: 'findbugs'
apply plugin: 'pmd'

// ignoreFailures: Whether or not this task will ignore failures and continue running the build.
codenarc.ignoreFailures = true
findbugs.ignoreFailures = true
pmd.ignoreFailures = true
*/

/* perfTest ----------------------------------------------------------------- */
sourceSets {
    perfTest
}

configurations {
    perfTestCompile.extendsFrom compile
}

dependencies {
    perfTestCompile sourceSets.main.output
}

task runChunkCachePerformanceTest(type:JavaExec) {
    description = "Run 'ChunkCachePerformanceTest'"
    main = 'org.terasology.world.ChunkCachePerformanceTest'
    classpath sourceSets.perfTest.runtimeClasspath
    jvmArgs '-Xms512m', '-Xmx1024m', '-XX:MaxPermSize=128m'
}

/* Misc tasks ------------------------------------------------------------------- */
task assembleMainOutput(type:Sync) {
    from sourceSets.main.output
    into "$buildDir/$destDirMainOutput"
}

task run(type:JavaExec) {
    description = "Run 'Terasology'"
    dependsOn extractNatives
    dependsOn assembleMainOutput
    main = mainClassName
    classpath "$buildDir/$destDirMainOutput"
    classpath configurations.runtime
    // TODO jvmArgs needed?
}

task deleteSavedWorldsSubfolders(type: Delete) {
    description = "Delete all subfolders from '$dirSavedWorlds'"
    delete file(dirSavedWorlds).listFiles().findAll { it.directory }
}

task deleteSavedWorldsFiles(type: Delete) {
    description = "Delete all files from '$dirSavedWorlds'"
    delete file(dirSavedWorlds).listFiles().findAll { !it.directory }
}

task zipSavedWorldsFolder(type: Zip) {
    description = "Creates a SavedWorlds ZIP file from '$dirSavedWorlds'"
    appendix = "SavedWorlds"
    classifier = startDateTimeString
    into (dirSavedWorlds) {
        from dirSavedWorlds
    }
}

task runProtobufWindows(type:Exec) {
    description = "Run 'Protobuf Compiler' (Windows)"
    commandLine 'protobuf\\compiler\\protoc.exe', '--proto_path=src\\main\\protobuf', '--java_out', 'src\\main\\java', 'src\\main\\protobuf\\*'
}

/* Distributions: Application/Applet ----------------------------------------*/
task distMods {
    file('mods').listFiles().each { File mod ->
        if (mod.isDirectory() ) {
            task('distMod-' + mod.getName(), type: Zip) {
                from (mod)
                archiveName = mod.getName() + '.zip'
                destinationDir = file("$buildDir/$destDirMods")
            }
            distMods.dependsOn tasks['distMod-' + mod.getName()]
        }
    }
}

task distApplication(type:Sync) {
    description = "Creates an Application folder"
    dependsOn extractNatives
    dependsOn distMods
    into("$buildDir/$destDirApplication")
    from 'README.markdown'
    from 'LICENSE.txt'
    from jar
    from('launchScripts') {
        exclude('Launcher.xml')
    }
    into(subDirLibs) {
        from configurations.runtime
    }
    into(dirNatives) {
        from dirNatives
    }
    into(dirData) {
        from dirData
    }
    into(subDirMods) {
        from "$buildDir/$destDirMods"
    }
}

task distApplet(type:Sync) {
    description = "Creates an Applet folder"
    dependsOn distMods
    into("$buildDir/$destDirApplet")
    from 'README.markdown'
    from 'LICENSE.txt'
    from jar
    from(dirApplet) {
        exclude '*.keystore'
    }
    into(subDirLibs) {
        from configurations.runtime
        exclude { details -> details.file.name.contains("lwjgl") || details.file.name.contains("jinput") }
    }
    into(subDirMods) {
        from "$buildDir/$destDirMods"
    }
}
distApplet.doLast {
    ant.signjar(jar: "$buildDir/$destDirApplet/$jarFileName", keystore: "$dirApplet/tera.keystore", alias: 'Terasology', storepass: 'Terasology')
    file("$buildDir/$destDirApplet/$subDirLibs").listFiles().each {
        if (it.getName().endsWith(".jar"))
            ant.signjar(jar: it, keystore: "$dirApplet/tera.keystore", alias: 'Terasology', storepass: 'Terasology')
    }
}

task distModsZip(type:Zip) {
    description = "Creates a MODs ZIP file from '$buildDir/$destDirMods'"
    dependsOn distMods
    appendix 'Mods'
    from "$buildDir/$destDirMods"
}

task distApplicationZip(type:Zip) {
    description = "Creates an Application ZIP file from '$buildDir/$destDirApplication'"
    dependsOn distApplication
    //appendix 'Application'
    from "$buildDir/$destDirApplication"
}

task distAppletZip(type:Zip) {
    description = "Creates an Applet ZIP file from '$buildDir/$destDirApplet'"
    dependsOn distApplet
    appendix 'Applet'
    from "$buildDir/$destDirApplet"
}

/* IDE --------------------------------------------------------------------- */
ideaModule.dependsOn extractNatives
eclipseClasspath.dependsOn extractNatives
