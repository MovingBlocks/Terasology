// This include file is meant for each Java project/module and contains setup for artifact repos, code analysis, etc

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'project-report'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'

// Computes code coverage of (unit) tests
apply plugin: 'jacoco'

sourceCompatibility = 1.8
targetCompatibility = 1.8

javadoc.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// We use both Maven Central and our own Artifactory instance, which contains module builds, extra libs, and so on
repositories {
    // For development so you can publish binaries locally and have them grabbed from there
    mavenLocal()

    // External libs - jcenter is Bintray and is supposed to be a superset of Maven Central, but do both just in case
    jcenter()
    mavenCentral()

    // MovingBlocks Artifactory instance for libs not readily available elsewhere plus our own libs
    maven {
        if (rootProject.hasProperty("alternativeResolutionRepo")) {
            // If the user supplies an alternative repo via gradle.properties then use that
            url alternativeResolutionRepo
        } else {
            // Our default is the main virtual repo containing everything except repos for testing Artifactory itself
            url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
        }
    }
}

dependencies {
    checkstyle ('com.puppycrawl.tools:checkstyle:6.14.1')
    pmd ('net.sourceforge.pmd:pmd-core:5.4.1')
    pmd ('net.sourceforge.pmd:pmd-java:5.4.1')
    // the FindBugs version is set in the configuration
}

task sourceJar(type: Jar) {
    description = "Create a JAR with all sources"
    from sourceSets.main.allSource
    from sourceSets.test.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = "Create a JAR with the JavaDoc for the java sources"
    from javadoc.destinationDir
    classifier = 'javadoc'
}

// Extra details provided for unit tests
test {
    // ignoreFailures: Specifies whether the build should break when the verifications performed by this task fail.
    ignoreFailures = true

    // showStandardStreams: makes the standard streams (err and out) visible at console when running tests
    testLogging.showStandardStreams = true

    // Arguments to include while running tests
    jvmArgs '-Xms512m', '-Xmx1024m'

    // Make sure the natives have been extracted, but only for multi-workspace setups (not for solo module builds)
    if (project.name != project(':').name) {
        dependsOn rootProject.extractNatives
    }

    jacoco {
        append = false
        excludes = ["org.terasology.protobuf.*"]
    }
}

jacoco {
    toolVersion = "0.7.5.201505241946"
}

jacocoTestReport {
    dependsOn test // Despite doc saying this should be automatic we need to explicitly add it anyway :-(
    reports {
        // Used to be exec, but that had a binary incompatibility between JaCoCo 0.7.4 and 0.7.5 and issues with some plugins
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

// The config files here work in both a multi-project workspace (IDEs, running from source) and for solo module builds
// Solo module builds in Jenkins get a copy of the config dir from the engine harness so it still lives at root/config
// TODO: Maybe update other projects like modules to pull the zipped dependency so fewer quirks are needed in Jenkins
checkstyle {
    ignoreFailures = true
    configFile = new File(rootDir, 'config/metrics/checkstyle/checkstyle.xml')
    configProperties.samedir = checkstyle.configFile.parentFile
}

pmd {
    ignoreFailures = true
    ruleSetFiles = files("$rootDir/config/metrics/pmd/pmd.xml")
    // By default, gradle uses both ruleset file AND the rulesets. Override the ruleSets to use only those from the file
    ruleSets = []
}

findbugs {
    ignoreFailures = true
    toolVersion = '3.0.1'
    excludeFilter = new File(rootDir, "config/metrics/findbugs/findbugs-exclude.xml")
}

// TODO: Temporary until javadoc has been fixed for Java 8 everywhere
javadoc {
    failOnError = false
}