// This include file applies maven-publish related settings to places that need them (root project + modules)
// It is a superset of the the stuff common to Java sub projects so we include the common.gradle here
apply from: "$rootDir/config/gradle/common.gradle"

apply plugin: 'maven-publish'

publishing {
    publications {
        "$project.name"(MavenPublication) {
            // Without this we get a .pom with no dependencies
            from components.java

            artifact source: sourceJar, classifier: 'sources'
            artifact source: javadocJar, classifier: 'javadoc'

            repositories {
                maven {
                    name = 'TerasologyOrg'

                    if (rootProject.hasProperty("publishRepo")) {
                        // This first option is good for local testing, you can set a full explicit target repo in gradle.properties
                        url = "http://artifactory.terasology.org/artifactory/$publishRepo"
                        println "Changing PUBLISH repoKey set via Gradle property to $publishRepo"
                    } else {
                        // Support override from the environment to use a different target publish org
                        String deducedPublishRepo = System.getenv()["PUBLISH_ORG"]
                        if (deducedPublishRepo == null || deducedPublishRepo == "") {
                            // If not then default
                            deducedPublishRepo = "terasology"
                        }

                        // Check the active Git branch and some module logic to see whether we're doing a release or snapshot
                        String gitBranch = System.getenv()["BRANCH_NAME"]
                        if (isMaster(gitBranch) && !shouldBypassModuleRelease()) {
                            deducedPublishRepo += "-release-local"
                        } else {
                            deducedPublishRepo += "-snapshot-local"
                        }

                        println "The final deduced publish repo is $deducedPublishRepo"
                        url = "http://artifactory.terasology.org/artifactory/$deducedPublishRepo"
                    }

                    if (rootProject.hasProperty("mavenUser") && rootProject.hasProperty("mavenPass")) {
                        credentials {
                            username = "$mavenUser"
                            password = "$mavenPass"
                        }
                        authentication {
                            basic(BasicAuthentication)
                        }
                    }
                }
            }
        }
    }
}

def isMaster(gitBranch) {
    return gitBranch != null && gitBranch != "" && gitBranch.equals("master");
}

// Mildly awkward: Modules aren't ready globally to accept master branch == release, so make it opt-in by checking a prop that defaults to bypass
def shouldBypassModuleRelease() {
    return project.hasProperty("bypassModuleReleaseManagement") && bypassModuleReleaseManagement == "true";
}
