// Stuff specific to IDEA IntelliJ setup - meant to be included by more central Gradle files

ext {

    // Activate Checkstyle config
    ideaActivateCheckstyle = { Node iprNode ->
        // Even if the component already exists this'll just overwrite it - shouldn't duplicate
        def checkstyle = iprNode.appendNode('component', [name: 'CheckStyle-IDEA'])

        // use NodeBuilder to create the config block in the xml structure
        def builder = new NodeBuilder()
        def option = builder.option(name: 'configuration') {
            map {
                entry(key: 'active-configuration',
                        value: 'PROJECT_RELATIVE:$PROJECT_DIR$/config/metrics/checkstyle/checkstyle.xml:Terasology CheckStyle')
                entry(key: 'check-nonjava-files', value: false)
                entry(key: 'check-test-classes', value: true)
                entry(key: 'location-0',
                        value: 'CLASSPATH:/sun_checks.xml:The default CheckStyle rules')
                entry(key: 'location-1',
                        value: 'PROJECT_RELATIVE:$PROJECT_DIR$/config/metrics/checkstyle/checkstyle.xml:Terasology CheckStyle')
                entry(key: 'property-1.samedir', value: 'config/metrics/checkstyle')
                entry(key: 'suppress-errors', value: false)
                entry(key: 'thirdparty-classpath', value: '')
            }
        }

        // Add result from NodeBuilder
        checkstyle.append option
    }

    // Activate copyright conventions
    ideaActivateCopyright = { Node iprNode ->
        // Setup copyright statement injection
        def copyrightManager = iprNode.find { it.@name == 'CopyrightManager' }
        copyrightManager.@default = "TerasologyEngine"
        def copyright = copyrightManager.appendNode("copyright")
        copyright.appendNode("option", [name: "notice", value: 'Copyright ' + Calendar.getInstance().get(Calendar.YEAR) + ' MovingBlocks\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.'])
        copyright.appendNode("option", [name: "keyword", value: "Copyright"])
        copyright.appendNode("option", [name: "allowReplaceKeyword", value: ""])
        copyright.appendNode("option", [name: "myName", value: "TerasologyEngine"])
        copyright.appendNode("option", [name: "myLocal", value: "true"])
        def langOptions = copyrightManager.appendNode("LanguageOptions", [name: "__TEMPLATE__"])
        langOptions.appendNode("option", [name: "addBlankAfter", value: "false"])
    }

    // Activate special cases for annotations
    ideaActivateAnnotations = { Node iprNode ->
        // Setup knowledge of certain annotations being entry points (so don't mark annotated items as unused)
        def entryPointsManager = iprNode.appendNode('component', [name: "EntryPointsManager"])
        def entryPoints = entryPointsManager.appendNode('entry_points', [version: '2.0'])
        def entryPointsList = entryPointsManager.appendNode('list', [size: '4'])
        entryPointsList.appendNode('item', [index: '0', class: 'java.lang.String', itemvalue: 'org.terasology.entitySystem.event.ReceiveEvent'])
        entryPointsList.appendNode('item', [index: '1', class: 'java.lang.String', itemvalue: 'org.terasology.registry.In'])
        entryPointsList.appendNode('item', [index: '2', class: 'java.lang.String', itemvalue: 'org.terasology.entitySystem.systems.RegisterSystem'])
        entryPointsList.appendNode('item', [index: '3', class: 'java.lang.String', itemvalue: 'org.terasology.logic.console.Command'])
        def writeAnnotations = entryPointsManager.appendNode("writeAnnotations")
        writeAnnotations.appendNode("writeAnnotation", [name: "org.terasology.registry.In"])
    }

    // Activate Git for the root + appropriate sub projects (may add more later)
    ideaActivateGit = { Node iprNode ->

        // Set root project to use Git
        def vcsMappings = iprNode.component.find { it.@name == 'VcsDirectoryMappings' }
        vcsMappings.mapping.@vcs = 'Git'

        // Set Terasology "modules" to use Git (also: huh, this works and both prints and does stuff - handy!)
        //println "Each module child project (for Git auto-enable): " +
        rootProject.project(':modules').childProjects.each { child ->
            if (child.value.path == ':modules:Core' || child.value.path == ':modules:CoreSampleGameplay' || child.value.path == ':modules:BuilderSampleGameplay') {
                println "Skipping IntelliJ Git setup for internal module: " + child.value.path
            } else {
                println "Preparing IntelliJ Git setup for module $child.value.name"
                vcsMappings.appendNode('mapping', [
                        'directory': "\$PROJECT_DIR\$" + child.value.path.replace(':', '/'),
                        'vcs'      : 'Git'
                ])
            }
        }

        // Set Terasology "facades" to use Git (except the bundled "PC" facade - that's covered by the root project)
        rootProject.project(':facades').childProjects.each { child ->

            if (child.value.path == ':facades:PC' || child.value.path == ':facades:TeraEd') {
                println "Skipping IntelliJ Git setup for 'PC' or 'TeraEd' facade (internal)"
            } else {
                println "Preparing IntelliJ Git setup for facade $child.value.name"
                vcsMappings.appendNode('mapping', [
                        'directory': "\$PROJECT_DIR\$" + child.value.path.replace(':', '/'),
                        'vcs'      : 'Git'
                ])
            }
        }

        // Set Terasology related libraries to use Git
        rootProject.project(':libs').childProjects.each { child ->

            println "Preparing IntelliJ Git setup for lib $child.value.name"
            vcsMappings.appendNode('mapping', [
                    'directory': "\$PROJECT_DIR\$" + child.value.path.replace(':', '/'),
                    'vcs'      : 'Git'
            ])
        }

        // Special case for the "Index" lib if present - not a standard Java project but still under Git control
        File indexLibDir = new File(rootDir, "libs/Index")
        if (indexLibDir.exists() && indexLibDir.isDirectory()) {
            println "Preparing IntelliJ Git setup for Index lib"
            vcsMappings.appendNode('mapping', [
                    'directory': "\$PROJECT_DIR\$" + "/libs/Index",
                    'vcs'      : 'Git'
            ])
        }

        // Set meta-modules to use Git
        rootProject.project(':metas').childProjects.each { child ->

            println "Preparing IntelliJ Git setup for meta-module $child.value.name"
            vcsMappings.appendNode('mapping', [
                    'directory': "\$PROJECT_DIR\$" + child.value.path.replace(':', '/'),
                    'vcs'      : 'Git'
            ])
        }
    }

    // Activate 'Gradle' plugin - TODO: Doesn't actually work with the Gradle wrapper in a non-default location :-(
    ideaActivateGradle = { Node iprNode ->
        def gradleSettings = iprNode.component.find { it.@name == 'GradleSettings' }
        if (gradleSettings == null) {
            gradleSettings = iprNode.appendNode('component', [name: 'GradleSettings'])
            gradleSettings.appendNode('option', [name: 'linkedProjectPath', value: '$PROJECT_DIR$/build.gradle'])
        }
    }

    // Enable "make project automatically"
    ideaMakeAutomatically = { Node iwsNode ->
        def compilerWsConf = iwsNode.find { it.@name == 'CompilerWorkspaceConfiguration' }

        // Slowly realizing the XML stuff is smart enough to not insert dupes even without an if, but .. scary!
        if (compilerWsConf == null) {
            compilerWsConf = iwsNode.appendNode('component', [name: 'CompilerWorkspaceConfiguration'])
            compilerWsConf.appendNode("option", [name: "MAKE_PROJECT_ON_SAVE", value: "true"])
        }
    }

    // Generate a run configuration for the primary PC facade way of running the game
    ideaRunConfig = { Node iwsNode ->

        // Add our run configs - this one launches with homedir set to local and the Crash Reporter off
        def runManager = iwsNode.find { it.@name == 'RunManager' }
        // TODO: Probably should make these run config blocks generic already ...
        runManager.append(new XmlParser().parseText('''
            <configuration default="false" name="TerasologyPC" type="Application" factoryName="Application">
              <extension name="coverage" enabled="false" merge="false" runner="idea">
                <pattern>
                  <option name="PATTERN" value="org.terasology.engine.*"/>
                  <option name="ENABLED" value="true"/>
                </pattern>
              </extension>
              <option name="MAIN_CLASS_NAME" value="org.terasology.engine.Terasology"/>
              <option name="VM_PARAMETERS" value="-Xms256m -Xmx1536m"/>
              <option name="PROGRAM_PARAMETERS" value="-homedir -noCrashReport"/>
              <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$"/>
              <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false"/>
              <option name="ALTERNATIVE_JRE_PATH" value=""/>
              <option name="ENABLE_SWING_INSPECTOR" value="false"/>
              <option name="ENV_VARIABLES"/>
              <option name="PASS_PARENT_ENVS" value="true"/>
              <module name="PC"/>
              <envs/>
              <RunnerSettings RunnerId="Debug">
                <option name="DEBUG_PORT" value=""/>
                <option name="TRANSPORT" value="0"/>
                <option name="LOCAL" value="true"/>
              </RunnerSettings>
              <RunnerSettings RunnerId="Run"/>
              <ConfigurationWrapper RunnerId="Debug"/>
              <ConfigurationWrapper RunnerId="Run"/>
              <method/>
            </configuration>
        '''))

        runManager.append(new XmlParser().parseText('''
            <configuration default="false" name="TerasologyPC (EXTREME 8GB)" type="Application" factoryName="Application">
              <extension name="coverage" enabled="false" merge="false" runner="idea">
                <pattern>
                  <option name="PATTERN" value="org.terasology.engine.*"/>
                  <option name="ENABLED" value="true"/>
                </pattern>
              </extension>
              <option name="MAIN_CLASS_NAME" value="org.terasology.engine.Terasology"/>
              <option name="VM_PARAMETERS" value="-Xms256m -Xmx8192m"/>
              <option name="PROGRAM_PARAMETERS" value="-homedir -noCrashReport"/>
              <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$"/>
              <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false"/>
              <option name="ALTERNATIVE_JRE_PATH" value=""/>
              <option name="ENABLE_SWING_INSPECTOR" value="false"/>
              <option name="ENV_VARIABLES"/>
              <option name="PASS_PARENT_ENVS" value="true"/>
              <module name="PC"/>
              <envs/>
              <RunnerSettings RunnerId="Debug">
                <option name="DEBUG_PORT" value=""/>
                <option name="TRANSPORT" value="0"/>
                <option name="LOCAL" value="true"/>
              </RunnerSettings>
              <RunnerSettings RunnerId="Run"/>
              <ConfigurationWrapper RunnerId="Debug"/>
              <ConfigurationWrapper RunnerId="Run"/>
              <method/>
            </configuration>
        '''))

        // Run config for a client with activated Java FlightRecorder recording. Recording will be dumped when the application is closed
        runManager.append(new XmlParser().parseText('''
            <configuration default="false" name="TerasologyPC (Java FlightRecorder)" type="Application" factoryName="Application">
              <extension name="coverage" enabled="false" merge="false" runner="idea">
                <pattern>
                  <option name="PATTERN" value="org.terasology.engine.*"/>
                  <option name="ENABLED" value="true"/>
                </pattern>
              </extension>
              <option name="MAIN_CLASS_NAME" value="org.terasology.engine.Terasology"/>
              <option name="VM_PARAMETERS" value="-Xms256m -Xmx1536m -XX:+UnlockCommercialFeatures -XX:+FlightRecorder -XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints -XX:StartFlightRecording=filename=terasology.jfr,dumponexit=true"/>
              <option name="PROGRAM_PARAMETERS" value="-homedir -noCrashReport"/>
              <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$"/>
              <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false"/>
              <option name="ALTERNATIVE_JRE_PATH" value=""/>
              <option name="ENABLE_SWING_INSPECTOR" value="false"/>
              <option name="ENV_VARIABLES"/>
              <option name="PASS_PARENT_ENVS" value="true"/>
              <module name="PC"/>
              <envs/>
              <RunnerSettings RunnerId="Debug">
                <option name="DEBUG_PORT" value=""/>
                <option name="TRANSPORT" value="0"/>
                <option name="LOCAL" value="true"/>
              </RunnerSettings>
              <RunnerSettings RunnerId="Run"/>
              <ConfigurationWrapper RunnerId="Debug"/>
              <ConfigurationWrapper RunnerId="Run"/>
              <method/>
            </configuration>
        '''))

        // Run config for a second client in its own data dir (for easy multiplayer testing)
        runManager.append(new XmlParser().parseText('''
            <configuration default="false" name="TerasologyPC (2nd client)" type="Application" factoryName="Application">
              <extension name="coverage" enabled="false" merge="false" runner="idea">
                <pattern>
                  <option name="PATTERN" value="org.terasology.engine.*"/>
                  <option name="ENABLED" value="true"/>
                </pattern>
              </extension>
              <option name="MAIN_CLASS_NAME" value="org.terasology.engine.Terasology"/>
              <option name="VM_PARAMETERS" value="-Xms256m -Xmx1536m"/>
              <option name="PROGRAM_PARAMETERS" value="-homedir=terasology-2ndclient -noCrashReport"/>
              <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$"/>
              <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false"/>
              <option name="ALTERNATIVE_JRE_PATH" value=""/>
              <option name="ENABLE_SWING_INSPECTOR" value="false"/>
              <option name="ENV_VARIABLES"/>
              <option name="PASS_PARENT_ENVS" value="true"/>
              <module name="PC"/>
              <envs/>
              <RunnerSettings RunnerId="Debug">
                <option name="DEBUG_PORT" value=""/>
                <option name="TRANSPORT" value="0"/>
                <option name="LOCAL" value="true"/>
              </RunnerSettings>
              <RunnerSettings RunnerId="Run"/>
              <ConfigurationWrapper RunnerId="Debug"/>
              <ConfigurationWrapper RunnerId="Run"/>
              <method/>
            </configuration>
        '''))

        // Run config for a *third* client in its own data dir (for more extensive multiplayer testing)
        runManager.append(new XmlParser().parseText('''
            <configuration default="false" name="TerasologyPC (3rd client)" type="Application" factoryName="Application">
              <extension name="coverage" enabled="false" merge="false" runner="idea">
                <pattern>
                  <option name="PATTERN" value="org.terasology.engine.*"/>
                  <option name="ENABLED" value="true"/>
                </pattern>
              </extension>
              <option name="MAIN_CLASS_NAME" value="org.terasology.engine.Terasology"/>
              <option name="VM_PARAMETERS" value="-Xms256m -Xmx1536m"/>
              <option name="PROGRAM_PARAMETERS" value="-homedir=terasology-3rdclient -noCrashReport"/>
              <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$"/>
              <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false"/>
              <option name="ALTERNATIVE_JRE_PATH" value=""/>
              <option name="ENABLE_SWING_INSPECTOR" value="false"/>
              <option name="ENV_VARIABLES"/>
              <option name="PASS_PARENT_ENVS" value="true"/>
              <module name="PC"/>
              <envs/>
              <RunnerSettings RunnerId="Debug">
                <option name="DEBUG_PORT" value=""/>
                <option name="TRANSPORT" value="0"/>
                <option name="LOCAL" value="true"/>
              </RunnerSettings>
              <RunnerSettings RunnerId="Run"/>
              <ConfigurationWrapper RunnerId="Debug"/>
              <ConfigurationWrapper RunnerId="Run"/>
              <method/>
            </configuration>
        '''))

        // Run config that includes the Crash Reporter
        runManager.append(new XmlParser().parseText('''
            <configuration default="false" name="TerasologyPC (CR enabled)" type="Application" factoryName="Application">
              <extension name="coverage" enabled="false" merge="false" runner="idea">
                <pattern>
                  <option name="PATTERN" value="org.terasology.engine.*"/>
                  <option name="ENABLED" value="true"/>
                </pattern>
              </extension>
              <option name="MAIN_CLASS_NAME" value="org.terasology.engine.Terasology"/>
              <option name="VM_PARAMETERS" value="-Xms256m -Xmx1536m"/>
              <option name="PROGRAM_PARAMETERS" value="-homedir"/>
              <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$"/>
              <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false"/>
              <option name="ALTERNATIVE_JRE_PATH" value=""/>
              <option name="ENABLE_SWING_INSPECTOR" value="false"/>
              <option name="ENV_VARIABLES"/>
              <option name="PASS_PARENT_ENVS" value="true"/>
              <module name="PC"/>
              <envs/>
              <RunnerSettings RunnerId="Debug">
                <option name="DEBUG_PORT" value=""/>
                <option name="TRANSPORT" value="0"/>
                <option name="LOCAL" value="true"/>
              </RunnerSettings>
              <RunnerSettings RunnerId="Run"/>
              <ConfigurationWrapper RunnerId="Debug"/>
              <ConfigurationWrapper RunnerId="Run"/>
              <method/>
            </configuration>
        '''))

        // Run config that disables the splash screen
        runManager.append(new XmlParser().parseText('''
            <configuration default="false" name="TerasologyPC (Splash disabled)" type="Application" factoryName="Application">
              <extension name="coverage" enabled="false" merge="false" runner="idea">
                <pattern>
                  <option name="PATTERN" value="org.terasology.engine.*"/>
                  <option name="ENABLED" value="true"/>
                </pattern>
              </extension>
              <option name="MAIN_CLASS_NAME" value="org.terasology.engine.Terasology"/>
              <option name="VM_PARAMETERS" value="-Xms256m -Xmx1536m"/>
              <option name="PROGRAM_PARAMETERS" value="-homedir -noCrashReport -noSplash"/>
              <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$"/>
              <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false"/>
              <option name="ALTERNATIVE_JRE_PATH" value=""/>
              <option name="ENABLE_SWING_INSPECTOR" value="false"/>
              <option name="ENV_VARIABLES"/>
              <option name="PASS_PARENT_ENVS" value="true"/>
              <module name="PC"/>
              <envs/>
              <RunnerSettings RunnerId="Debug">
                <option name="DEBUG_PORT" value=""/>
                <option name="TRANSPORT" value="0"/>
                <option name="LOCAL" value="true"/>
              </RunnerSettings>
              <RunnerSettings RunnerId="Run"/>
              <ConfigurationWrapper RunnerId="Debug"/>
              <ConfigurationWrapper RunnerId="Run"/>
              <method/>
            </configuration>
        '''))

        // Run config for loading straight to the last save (skipping main menu)
        runManager.append(new XmlParser().parseText('''
            <configuration default="false" name="TerasologyPC (load latest)" type="Application" factoryName="Application">
              <extension name="coverage" enabled="false" merge="false" runner="idea">
                <pattern>
                  <option name="PATTERN" value="org.terasology.engine.*"/>
                  <option name="ENABLED" value="true"/>
                </pattern>
              </extension>
              <option name="MAIN_CLASS_NAME" value="org.terasology.engine.Terasology"/>
              <option name="VM_PARAMETERS" value="-Xms256m -Xmx1536m"/>
              <option name="PROGRAM_PARAMETERS" value="-homedir -noCrashReport -loadlastgame"/>
              <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$"/>
              <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false"/>
              <option name="ALTERNATIVE_JRE_PATH" value=""/>
              <option name="ENABLE_SWING_INSPECTOR" value="false"/>
              <option name="ENV_VARIABLES"/>
              <option name="PASS_PARENT_ENVS" value="true"/>
              <module name="PC"/>
              <envs/>
              <RunnerSettings RunnerId="Debug">
                <option name="DEBUG_PORT" value=""/>
                <option name="TRANSPORT" value="0"/>
                <option name="LOCAL" value="true"/>
              </RunnerSettings>
              <RunnerSettings RunnerId="Run"/>
              <ConfigurationWrapper RunnerId="Debug"/>
              <ConfigurationWrapper RunnerId="Run"/>
              <method/>
            </configuration>
        '''))

        // Run config for running the game without world saving enabled
        runManager.append(new XmlParser().parseText('''
            <configuration default="false" name="TerasologyPC (no saves)" type="Application" factoryName="Application">
              <extension name="coverage" enabled="false" merge="false" runner="idea">
                <pattern>
                  <option name="PATTERN" value="org.terasology.engine.*"/>
                  <option name="ENABLED" value="true"/>
                </pattern>
              </extension>
              <option name="MAIN_CLASS_NAME" value="org.terasology.engine.Terasology"/>
              <option name="VM_PARAMETERS" value="-Xms256m -Xmx1536m"/>
              <option name="PROGRAM_PARAMETERS" value="-homedir -noCrashReport -noSaveGames"/>
              <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$"/>
              <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false"/>
              <option name="ALTERNATIVE_JRE_PATH" value=""/>
              <option name="ENABLE_SWING_INSPECTOR" value="false"/>
              <option name="ENV_VARIABLES"/>
              <option name="PASS_PARENT_ENVS" value="true"/>
              <module name="PC"/>
              <envs/>
              <RunnerSettings RunnerId="Debug">
                <option name="DEBUG_PORT" value=""/>
                <option name="TRANSPORT" value="0"/>
                <option name="LOCAL" value="true"/>
              </RunnerSettings>
              <RunnerSettings RunnerId="Run"/>
              <ConfigurationWrapper RunnerId="Debug"/>
              <ConfigurationWrapper RunnerId="Run"/>
              <method/>
            </configuration>
        '''))

        // Run config for running the game without audio
        runManager.append(new XmlParser().parseText('''
            <configuration default="false" name="TerasologyPC (no audio)" type="Application" factoryName="Application">
              <extension name="coverage" enabled="false" merge="false" runner="idea">
                <pattern>
                  <option name="PATTERN" value="org.terasology.engine.*"/>
                  <option name="ENABLED" value="true"/>
                </pattern>
              </extension>
              <option name="MAIN_CLASS_NAME" value="org.terasology.engine.Terasology"/>
              <option name="VM_PARAMETERS" value="-Xms256m -Xmx1536m"/>
              <option name="PROGRAM_PARAMETERS" value="-homedir -noCrashReport -noSound"/>
              <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$"/>
              <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false"/>
              <option name="ALTERNATIVE_JRE_PATH" value=""/>
              <option name="ENABLE_SWING_INSPECTOR" value="false"/>
              <option name="ENV_VARIABLES"/>
              <option name="PASS_PARENT_ENVS" value="true"/>
              <module name="PC"/>
              <envs/>
              <RunnerSettings RunnerId="Debug">
                <option name="DEBUG_PORT" value=""/>
                <option name="TRANSPORT" value="0"/>
                <option name="LOCAL" value="true"/>
              </RunnerSettings>
              <RunnerSettings RunnerId="Run"/>
              <ConfigurationWrapper RunnerId="Debug"/>
              <ConfigurationWrapper RunnerId="Run"/>
              <method/>
            </configuration>
        '''))

        // Run config for headless mode
        runManager.append(new XmlParser().parseText('''
            <configuration default="false" name="TerasologyPC (Headless)" type="Application" factoryName="Application">
              <extension name="coverage" enabled="false" merge="false" runner="idea">
                <pattern>
                  <option name="PATTERN" value="org.terasology.engine.*"/>
                  <option name="ENABLED" value="true"/>
                </pattern>
              </extension>
              <option name="MAIN_CLASS_NAME" value="org.terasology.engine.Terasology"/>
              <option name="VM_PARAMETERS" value="-Xms256m -Xmx1536m"/>
              <option name="PROGRAM_PARAMETERS" value="-headless -homedir=terasology-server -overrideDefaultConfig=override.cfg"/>
              <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$"/>
              <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false"/>
              <option name="ALTERNATIVE_JRE_PATH" value=""/>
              <option name="ENABLE_SWING_INSPECTOR" value="false"/>
              <option name="ENV_VARIABLES"/>
              <option name="PASS_PARENT_ENVS" value="true"/>
              <module name="PC"/>
              <envs/>
              <RunnerSettings RunnerId="Debug">
                <option name="DEBUG_PORT" value=""/>
                <option name="TRANSPORT" value="0"/>
                <option name="LOCAL" value="true"/>
              </RunnerSettings>
              <RunnerSettings RunnerId="Run"/>
              <ConfigurationWrapper RunnerId="Debug"/>
              <ConfigurationWrapper RunnerId="Run"/>
              <method/>
            </configuration>
        '''))

        // Run config for TeraEd
        runManager.append(new XmlParser().parseText('''
            <configuration default="false" name="TeraEd (rendering editor)" type="Application" factoryName="Application">
              <extension name="coverage" enabled="false" merge="false" runner="idea">
                <pattern>
                  <option name="PATTERN" value="org.terasology.editor.TeraEd.*"/>
                  <option name="ENABLED" value="true"/>
                </pattern>
              </extension>
              <option name="MAIN_CLASS_NAME" value="org.terasology.editor.TeraEd"/>
              <option name="VM_PARAMETERS" value="-Xms256m -Xmx1536m"/>
              <option name="PROGRAM_PARAMETERS" value="-homedir"/>
              <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$"/>
              <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false"/>
              <option name="ALTERNATIVE_JRE_PATH" value=""/>
              <option name="ENABLE_SWING_INSPECTOR" value="false"/>
              <option name="ENV_VARIABLES"/>
              <option name="PASS_PARENT_ENVS" value="true"/>
              <module name="TeraEd"/>
              <envs/>
              <RunnerSettings RunnerId="Debug">
                <option name="DEBUG_PORT" value=""/>
                <option name="TRANSPORT" value="0"/>
                <option name="LOCAL" value="true"/>
              </RunnerSettings>
              <RunnerSettings RunnerId="Run"/>
              <ConfigurationWrapper RunnerId="Debug"/>
              <ConfigurationWrapper RunnerId="Run"/>
              <method/>
            </configuration>
        '''))

        // Run config for a single module's tests *without* running all engine tests (good template for making other single-module-only test run configs)
        // Naturally won't work unless you actually have the NameGenerator module present locally
        runManager.append(new XmlParser().parseText('''
            <configuration default="false" name="All in NameGenerator" type="JUnit" factoryName="JUnit">
              <extension name="coverage" enabled="false" merge="false" runner="idea" />
              <module name="NameGenerator" />
              <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
              <option name="ALTERNATIVE_JRE_PATH" />
              <option name="PACKAGE_NAME" value="" />
              <option name="MAIN_CLASS_NAME" value="" />
              <option name="METHOD_NAME" value="" />
              <option name="TEST_OBJECT" value="package" />
              <option name="VM_PARAMETERS" value="" />
              <option name="PARAMETERS" value="" />
              <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$" />
              <option name="ENV_VARIABLES" />
              <option name="PASS_PARENT_ENVS" value="true" />
              <option name="TEST_SEARCH_SCOPE">
                <value defaultName="singleModule" />
              </option>
              <envs />
              <patterns />
              <method />
            </configuration>
        '''))

        // Run config for engine tests with JaCoCo set for code coverage
        runManager.append(new XmlParser().parseText('''
            <configuration default="false" name="engine-tests with JaCoCo" type="JUnit" factoryName="JUnit">
              <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="jacoco" />
              <module name="engine-tests" />
              <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
              <option name="ALTERNATIVE_JRE_PATH" value="" />
              <option name="PACKAGE_NAME" value="" />
              <option name="MAIN_CLASS_NAME" value="" />
              <option name="METHOD_NAME" value="" />
              <option name="TEST_OBJECT" value="package" />
              <option name="VM_PARAMETERS" value="" />
              <option name="PARAMETERS" value="" />
              <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$" />
              <option name="ENV_VARIABLES" />
              <option name="PASS_PARENT_ENVS" value="true" />
              <option name="TEST_SEARCH_SCOPE">
                <value defaultName="moduleWithDependencies" />
              </option>
              <envs />
              <patterns />
              <method />
            </configuration>
        '''))

        // Run config for running with security set to permissive mode (don't block unsecure usages from within sandbox, just notify)
        runManager.append(new XmlParser().parseText('''
            <configuration default="false" name="TerasologyPC (permissive security)" type="Application" factoryName="Application">
              <extension name="coverage" enabled="false" merge="false" runner="idea">
                <pattern>
                  <option name="PATTERN" value="org.terasology.engine.*"/>
                  <option name="ENABLED" value="true"/>
                </pattern>
              </extension>
              <option name="MAIN_CLASS_NAME" value="org.terasology.engine.Terasology"/>
              <option name="VM_PARAMETERS" value="-Xms256m -Xmx1536m"/>
              <option name="PROGRAM_PARAMETERS" value="-homedir -noCrashReport -permissiveSecurity"/>
              <option name="WORKING_DIRECTORY" value="file://$PROJECT_DIR$"/>
              <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false"/>
              <option name="ALTERNATIVE_JRE_PATH" value=""/>
              <option name="ENABLE_SWING_INSPECTOR" value="false"/>
              <option name="ENV_VARIABLES"/>
              <option name="PASS_PARENT_ENVS" value="true"/>
              <module name="PC"/>
              <envs/>
              <RunnerSettings RunnerId="Debug">
                <option name="DEBUG_PORT" value=""/>
                <option name="TRANSPORT" value="0"/>
                <option name="LOCAL" value="true"/>
              </RunnerSettings>
              <RunnerSettings RunnerId="Run"/>
              <ConfigurationWrapper RunnerId="Debug"/>
              <ConfigurationWrapper RunnerId="Run"/>
              <method/>
            </configuration>
        '''))

        // This part puts the added run config into the actual "Run" drop-down
        runManager.append(new XmlParser().parseText('''
        <list size="2">
        <item index="0" class="java.lang.String" itemvalue="Application.TerasologyPC"/>
        <item index="1" class="java.lang.String" itemvalue="Application.TerasologyPC (Headless)"/>
        </list>
        '''))

        // Makes the added run config the selected item
        def runManagerTag = iwsNode.component.find { it.@name == 'RunManager' }
        runManagerTag.@selected = 'Application.TerasologyPC'
    }
}
