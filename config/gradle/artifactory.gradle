// This include file applies our Artifactory related settings to places that need them (root project + modules)
// It is a superset of the the stuff common to Java sub projects so we include the common.gradle here
apply from: "$rootDir/config/gradle/common.gradle"

// Artifactory publishing requires these (without maven we'd get no .pom with dependency info published)
apply plugin: 'maven'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

// This configures what we need to interact with the MovingBlocks Artifactory instance. It is primarily for local use.
// In Jenkins the Artifactory plugin can supply overrides for the following values
artifactory {
    contextUrl = 'http://artifactory.terasology.org/artifactory'

    // This is the target for publishing artifacts. Unless testing locally usually the setting in Jenkins is used
    publish {
        repository {
            // The repoKey can be overridden in Jenkins and via local gradle.properties if desired for testing
            if (rootProject.hasProperty("artifactoryPublishRepo")) {
                repoKey = artifactoryPublishRepo
                println "Changing PUBLISH repoKey to $artifactoryPublishRepo"
            } else {
                repoKey = 'terasology-snapshot-local'
                println "PUBLISH repoKey is terasology-snapshot-local (default value)"
            }

            // User and pass are overridden in Jenkins. You can supply your own for manual use in a local prop file, such as gradle.properties
            // This way we make it so you can run locally without having the user/pass set - but if the artifactoryPublish task is called it'll fail
            if (rootProject.hasProperty("artifactoryUser") && rootProject.hasProperty("artifactoryPass")) {
                username = "$artifactoryUser"
                password = "$artifactoryPass"
            }
            // Note that republishing artifacts under the same name (without an incremented SNAPSHOT for instance) may fail with "Forbidden"
        }

        defaults {
            publications ('mavenJava')
        }
    }

    // This is the source where we get dependencies. Or it would be but it does not appear to work
    // Only the main repositories {} seems to matter, and if commented out this still doesn't help
    // After a Jenkins upgrade in March 2015 the setting in Jenkins started working. Needs retesting here
    resolve {
        repository {
            // The repoKey can be overridden in Jenkins and via local gradle.properties if desired for testing
            if (rootProject.hasProperty("artifactoryResolveRepo")) {
                repoKey = artifactoryResolveRepo
                println "Changing RESOLVE repoKey to $artifactoryResolveRepo"
            } else {
                repoKey = 'virtual-repo-live'
                println "RESOLVE repoKey is virtual-repo-live (default value)"
            }
        }
    }
}

// The following helps configure artifacts for each sub-project that applies this file
// A configuration for publishing artifacts
configurations {
    published
}

// Define the artifacts we want to publish (the .pom will also be included since the Maven plugin is active)
artifacts {
    published jar
    published sourceJar
    published javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // Without this we get a .pom with no dependencies
            from components.java

            artifact jar
            artifact sourceJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }
}

// Technically the plain "jar" both here and above is included automatically, but leaving it explicit for clarity
artifactoryPublish {
    dependsOn jar, sourceJar, javadocJar
    // TODO: After Gradle 2.3 to 2.10 upgrade have to use `gradlew generatePomFileForMavenJavaPublication artifactoryPublish`
    // The generation task doesn't happen on its own yet can't be set as a dependsOn as it isn't available yet?
}