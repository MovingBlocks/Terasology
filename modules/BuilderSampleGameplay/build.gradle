// Simple build file for modules - the one under the Core module is the template, will be copied as needed to modules

// Dependencies needed for what our Gradle scripts themselves use. It cannot be included via an external Gradle file :-(
buildscript {
    repositories {
        // External libs - jcenter is Bintray and is supposed to be a superset of Maven Central, but do both just in case
        jcenter()
        mavenCentral()
        // gradle plugins
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        // Needed for caching reflected data during builds
        classpath 'org.reflections:reflections:0.9.10'
        classpath 'dom4j:dom4j:1.6.1'

        //Spotbugs
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.0.0"

        // SonarQube / Cloud scanning
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"
    }
}

import groovy.json.JsonSlurper
import org.reflections.Reflections
import org.reflections.util.FilterBuilder
import org.reflections.scanners.SubTypesScanner
import org.reflections.scanners.TypeAnnotationsScanner
import org.reflections.util.ConfigurationBuilder

ext {
    // Read environment variables, including variables passed by jenkins continuous integration server
    env = System.getenv()

    // This is a fun one ... when versions switched to dynamic -SNAPSHOT or not based on branch existing modules using `master` would suddenly try publishing releases
    // This won't work without additionally doing constant version bumps (perhaps via Git tags) - but too much work to switch around all modules at once
    // Complicating things more the use of publish.gradle to centralize logic means modules and engine bits are treated the same, yet we need to vary modules
    // Temporary workaround: default modules to bypass release management: master branch builds will still make snapshot builds for the snapshot repo
    // If a module actually wants release management simply include `"isReleaseManaged" : true` in module.txt - this is needed for the engine repo embedded modules
    // One option would be to slowly convert modulespace to default to a `develop` + `master` setup living in harmony with associated automation/github tweaks
    // Alternatively one more round of refactoring could switch to Git tags, a single `master` branch, and possible other things to help match snaps/PR builds somehow?
    bypassModuleReleaseManagement = "true"
}

def moduleDepends = [];
def moduleFile = file('module.txt')

// The module file should always exist if the module was correctly created or cloned using Gradle
if (!moduleFile.exists()) {
    println "Y U NO EXIST MODULE.TXT!"
    throw new GradleException("Failed to find module.txt for " + project.name)
}

//println "Scanning for dependencies in module.txt for " + project.name
def slurper = new JsonSlurper()
def moduleConfig = slurper.parseText(moduleFile.text)
for (dependency in moduleConfig.dependencies) {
    if (dependency.id != 'engine') {
        moduleDepends += dependency.id
    }
}

// Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)
version = moduleConfig.version

import org.gradle.internal.logging.text.StyledTextOutputFactory
import static org.gradle.internal.logging.text.StyledTextOutput.Style

// Check for an outright -SNAPSHOT in the loaded version - for ease of use we want to get rid of that everywhere, so warn about it and remove for the variable
def undesiredSnapshotTag = version.endsWith("-SNAPSHOT")
if (undesiredSnapshotTag) {
    println "Taking off undesired -SNAPSHOT"
    version -= "-SNAPSHOT"
    def out = services.get(StyledTextOutputFactory).create("an-ouput")
    out.withStyle(Style.FailureHeader).println("WARNING: Module " + project.name + " is explicitly versioned as a snapshot in module.txt, please remove '-SNAPSHOT'")
}

// The only case in which we make module non-snapshots is if release management is enabled and BRANCH_NAME is "master"
if (moduleConfig.isReleaseManaged && env.BRANCH_NAME == "master") {
    // This is mildly awkward since we need to bypass by default, yet if release management is on (true) then we set the bypass to false ..
    ext.bypassModuleReleaseManagement = false
} else {
    // In the case where we actually are building a snapshot we load -SNAPSHOT into the version variable, even if it wasn't there in module.txt
    version += "-SNAPSHOT"
}

// Jenkins-Artifactory integration catches on to this as part of the Maven-type descriptor
group = 'org.terasology.modules'

println "Version for $project.name loaded as $version for group $group"

// Grab all the common stuff like plugins to use, artifact repositories, code analysis config, Artifactory settings, Git magic
// Note that this statement is down a ways because it is affected by the stuff higher in this file like setting versioning
apply from: "$rootDir/config/gradle/publish.gradle"

// Handle some logic related to where what is
sourceSets {
    main.java.outputDir = new File("$buildDir/classes")
    test.java.outputDir = new File("$buildDir/testClasses")
}
JavaPluginConvention convention = project.getConvention().getPlugin(JavaPluginConvention.class);
SourceSet mainSourceSet = convention.getSourceSets().getByName("main");

// TODO: Remove when we don't need to rely on snapshots. Needed here for solo builds in Jenkins
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
configurations {
    terasologyModule
    compile.extendsFrom terasologyModule
}

// Set dependencies. Note that the dependency information from module.txt is used for other Terasology modules
dependencies {
    // Check to see if this module is not the root Gradle project - if so we are in a multi-project workspace
    implementation(group: 'org.terasology.engine', name: 'engine', version: '+', changing: true)
    implementation(group: 'org.terasology.engine', name: 'engine-tests', version: '+', changing: true)

    for (dependency in moduleDepends) {
        terasologyModule(group: 'org.terasology.modules', name: dependency, version: '+', changing: true)
    }
}

// Generate the module directory structure if missing
task createSkeleton() {
    mkdir('assets')
    mkdir('assets/animations')
    mkdir('assets/atlas')
    mkdir('assets/behaviors')
    mkdir('assets/blocks')
    mkdir('assets/blockSounds')
    mkdir('assets/blockTiles')
    mkdir('assets/fonts')
    mkdir('assets/i18n')
    mkdir('assets/materials')
    mkdir('assets/mesh')
    mkdir('assets/music')
    mkdir('assets/prefabs')
    mkdir('assets/shaders')
    mkdir('assets/shapes')
    mkdir('assets/skeletalMesh')
    mkdir('assets/skins')
    mkdir('assets/sounds')
    mkdir('assets/textures')
    mkdir('assets/ui')
    mkdir('overrides')
    mkdir('deltas')
    mkdir('src/main/java')
    mkdir('src/test/java')
}

task cacheReflections {
    description = 'Caches reflection output to make regular startup faster. May go stale and need cleanup at times.'
    inputs.files mainSourceSet.output.classesDirs
    outputs.file new File(mainSourceSet.output.classesDirs.first(), "reflections.cache")
    dependsOn classes

    doFirst {
        try {
            Reflections reflections = new Reflections(new ConfigurationBuilder()
                    .filterInputsBy(FilterBuilder.parsePackages("+org"))
                    .addUrls(inputs.getFiles().getSingleFile().toURI().toURL())
                    .setScanners(new TypeAnnotationsScanner(), new SubTypesScanner()))
            reflections.save(outputs.getFiles().getAsPath())
        } catch (MalformedURLException e) {
            getLogger().error("Cannot parse input {} to url", input.getAsPath());
        }
    }
}

task cleanReflections(type: Delete) {
    description = 'Cleans the reflection cache. Useful in cases where it has gone stale and needs regeneration.'
    delete cacheReflections.outputs.files
}

// This task syncs everything in the assets dir into the output dir, used when jarring the module
task syncAssets(type: Sync) {
    from 'assets'
    into "${mainSourceSet.output.classesDirs.first()}/assets"
}

task syncOverrides(type: Sync) {
    from 'overrides'
    into "${mainSourceSet.output.classesDirs.first()}/overrides"
}

task syncDeltas(type: Sync) {
    from 'deltas'
    into "${mainSourceSet.output.classesDirs.first()}/deltas"
}

// Instructions for packaging a jar file - is a manifest even needed for modules?
jar {
    // Make sure the assets directory is included
    dependsOn cacheReflections
    dependsOn syncAssets
    dependsOn syncOverrides
    dependsOn syncDeltas

    // Jarring needs to copy module.txt and all the assets into the output
    doFirst {
        copy {
            from 'module.txt'
            into mainSourceSet.output.classesDirs.first()
        }
    }
}

jar.finalizedBy cleanReflections

// Prep an IntelliJ module for the Terasology module - yes, might want to read that twice :D
idea {
    module {
        // Change around the output a bit
        inheritOutputDirs = false
        outputDir = file('build/classes')
        testOutputDir = file('build/testClasses')
        downloadSources = true
    }
}

// For Eclipse just make sure the classpath is right
eclipse {
    classpath {
        defaultOutputDir = file('build/classes')
    }
}
