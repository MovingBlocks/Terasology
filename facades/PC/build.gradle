// The PC facade is responsible for the primary distribution - a plain Java application runnable on PCs

// Grab all the common stuff like plugins to use, artifact repositories, code analysis config
apply from: "$rootDir/config/gradle/artifactory.gradle"

import org.apache.tools.ant.filters.FixCrLfFilter
import java.text.SimpleDateFormat;
import groovy.json.JsonBuilder

def dateTimeFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX")
dateTimeFormat.timeZone = TimeZone.getTimeZone("UTC")

ext {
    // Default path to store server data if running headless via Gradle
    localServerDataPath = 'terasology-server'

    // General props
    mainClassName = 'org.terasology.engine.Terasology'
    subDirLibs = 'libs'
    templatesDir = new File(rootDir, 'templates')
    rootDirDist = new File(rootDir, 'build/distributions')

    // Read environment variables, including variables passed by jenkins continuous integration server
    env = System.getenv()

    // Version related
    startDateTimeString = dateTimeFormat.format(new Date())
    versionFileName = 'VERSION'
    versionBase = new File(templatesDir, "version.txt").text.trim()
    displayVersion = versionBase
}

// Base the engine tests on the same version number as the engine
version = project(':engine').version
println "PC VERSION: $version"

// Jenkins-Artifactory integration catches on to this as part of the Maven-type descriptor
group = 'org.terasology.facades'

dependencies {
    compile project(':engine')

    /* TODO: Consider whether we can move the CR dependency back here from the engine, where it is referenced from the main menu
    // Dependency on CrashReporter, conditionally either from source or via binary
    File wouldBeSrcPath = new File(rootDir, 'libs/CrashReporter')
    println "Scanning for source CrashReporter at: " + wouldBeSrcPath.getAbsolutePath()

    if (wouldBeSrcPath.exists()) {
        println "*** Identified CrashReporter source, using that"
        //compile ':libs:CrashReporter:cr-terasology'

        def targetProject = findProject(':libs:CrashReporter:cr-terasology')
        println "Found the project? " + targetProject
        //compile targetProject

        compile project(':libs:CrashReporter:cr-terasology')
    } else {
        println "*** Setting a CrashReporter binary dependency, not present as source"
        compile group: 'org.terasology.crashreporter', name: 'cr-terasology', version: '4.0.0'
    }
    */
}

// Instructions for packaging a jar file for the PC facade
jar {
    manifest {
        //TODO: Maybe later add the engine's version number into here?
        def manifestClasspath = configurations.runtime.collect { it.getName() }.join(" ")
        attributes("Main-Class": mainClassName)
        attributes("Class-Path" : manifestClasspath)
        attributes("Implementation-Title": "Terasology-" + project.name)
        attributes("Implementation-Version": env.BUILD_NUMBER + ", " + env.GIT_BRANCH + ", " + env.BUILD_ID)
    }
}

configurations {
    // for fetching modules for running a server
    modules {
        transitive = false
    }
}

task game(type:JavaExec) {
    description = "Run 'Terasology' to play the game as a standard PC application"

    // Dependencies: natives + all modules & the PC facade itself (which will trigger the engine)
    dependsOn rootProject.extractNatives
    dependsOn rootProject.moduleClasses
    dependsOn classes

    // Run arguments
    main = mainClassName
    workingDir = rootDir
    String[] runArgs = ["-homedir"]
    args runArgs

    // Classpath: PC itself, engine classes, engine dependencies. Not modules or natives since the engine finds those
    classpath sourceSets.main.output.classesDir
    classpath sourceSets.main.output.resourcesDir
    classpath project(':engine').sourceSets.main.output.classesDir
    classpath project(':engine').configurations.runtime
}

task debug(type:JavaExec) {
    description = "Run 'Terasology' to play the game as a standard PC application (in debug mode)"

    // Dependencies: natives + all modules & the PC facade itself (which will trigger the engine)
    dependsOn rootProject.extractNatives
    dependsOn rootProject.moduleClasses
    dependsOn classes

    // Run arguments
    jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1044"]
    main = mainClassName
    workingDir = rootDir
    String[] runArgs = ["-homedir"]
    args runArgs

    // Classpath: PC itself, engine classes, engine dependencies. Not modules or natives since the engine finds those
    classpath sourceSets.main.output.classesDir
    classpath sourceSets.main.output.resourcesDir
    classpath project(':engine').sourceSets.main.output.classesDir
    classpath project(':engine').configurations.runtime
}

// By delaying this task to doLast (the << bit) we don't get the headless server dir set up unless actually wanting it
// TODO: This is not the Gradle Way. Needs more declared output-fu to determine up-to-date instead of the if
task setupServerConfig() << {
    description "Parses parameters passed via Gradle and writes them to the local run-from-source server dir's config.cfg"

    def json = new JsonBuilder()

    def serverRoot = rootProject.file(localServerDataPath);
    def config = new File(serverRoot, 'config.cfg')

    if (!config.exists()) {

        serverRoot.mkdir()
        logger.lifecycle("Creating config file $config")

        json {
            worldGeneration {
                if (project.hasProperty('seed')) {
                    logger.lifecycle("  Seed value: $seed");
                    defaultSeed seed
                }
                if (project.hasProperty('worldGen')) {
                    logger.lifecycle("  World Generator: $worldGen");
                    defaultGenerator worldGen
                }
            }
            defaultModSelection {
                if (project.hasProperty('extraModules')) {
                    logger.lifecycle("  Enabling modules: $extraModules");
                    modules extraModules.tokenize(" ,")
                }
            }
        }
        config.text = json.toPrettyString()
    }
}

// TODO: Seems to always be up to date so no modules get copied
task setupServerModules(type: Sync) << {
    description 'Parses "extraModules" - a comma-separated list of modules and puts them into ' + localServerDataPath

    if (project.hasProperty('extraModules')) {
        // Grab modules from Artifactory - cheats by declaring them as dependencies
        extraModules.tokenize(' ,').each { String module ->
            println "Extra module: " + module
            dependencies {
                modules group: 'org.terasology.modules', name: module, version: '+', changing: 'true'
            }
        }
    }

    from(configurations.modules)
    into(new File(rootProject.file(localServerDataPath), "modules"))
}

// TODO: Make a task to reset server / game data
task server(type:JavaExec) {
    description "Starts a headless multiplayer server with data stored in [project-root]/$localServerDataPath"

    // Dependencies: natives + all modules & the PC facade itself (which will trigger the engine)
    dependsOn rootProject.extractNatives
    dependsOn rootProject.moduleClasses
    dependsOn classes
    dependsOn setupServerConfig
    dependsOn setupServerModules

    // Run arguments
    main = mainClassName
    workingDir = rootDir
    String[] runArgs = ["-headless", "-homedir=$localServerDataPath"]
    args runArgs

    // Classpath: PC itself, engine classes, engine dependencies. Not modules or natives since the engine finds those
    classpath sourceSets.main.output.classesDir
    classpath sourceSets.main.output.resourcesDir
    classpath project(':engine').sourceSets.main.output.classesDir
    classpath project(':engine').configurations.runtime
}

// Preps a version file to bundle with PC dists. This eventually goes into the root of a zip file
task createVersionFile(type: Copy) {
    inputs.property('dateTime', startDateTimeString)
    onlyIf { env.BUILD_URL != null }
    from templatesDir
    into "$buildDir"
    include versionFileName
    expand(buildNumber: env.BUILD_NUMBER, buildUrl: env.BUILD_URL, gitBranch: env.GIT_BRANCH, dateTime: startDateTimeString, displayVersion: displayVersion)
    filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("crlf"))
}

// TODO: This could probably be done more Gradley (engine project resource dir instead of direct path?) and with some variables
task copyCreditsFile(type: Copy) {
    description "Copies the credits file into the engine's resource dir where it'll be read at runtime"
    from "$rootDir/docs"
    into "$rootDir/engine/src/main/resources"
    include "Credits.md"
}

// Main application dist target. Does NOT include any modules.
task distApp (type: Sync) {
    description = "Creates an application package for distribution"

    dependsOn createVersionFile
    dependsOn copyCreditsFile
    dependsOn rootProject.extractNatives
    dependsOn jar

    into ("$distsDir/app")
    from ("$rootDir/README.markdown") {
        filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("crlf"))
        rename('README.markdown', 'README')
    }
    from ("$rootDir/LICENSE") {
        filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("crlf"))
    }
    from ("$rootDir/NOTICE") {
        filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("crlf"))
    }
    from('launchScripts') {
        exclude('TeraEd.exe')
    }

    from("$buildDir/$versionFileName") {}

    into(subDirLibs) {
        from configurations.runtime
        from project(':engine').jar
        from ("$buildDir/libs") {
            include "*.jar"
            rename {
                'Terasology.jar'
            }
        }
    }
    into(dirNatives) {
        from "$rootDir/$dirNatives"
    }
}

// Distribute modules - only grabs Core in Jenkins but locally will grab any present. "Distros" now handle Jenkins packs
task distModules (type: Sync) {
    description = "Prepares local modules for distribution"
    dependsOn distApp
    dependsOn rootProject.moduleJars

    // So this is probably a hack, but it works ;-) It does not work if it is in distApp, default "into" quirk ?
    into("$distsDir/app/modules")
    rootProject.terasologyModules().each {
        from "$rootDir/modules/${it.name}/build/libs"
        include "*.jar"
    }
}

task distPCZip (type: Zip) {
    dependsOn distApp
    dependsOn distModules
    from "$distsDir/app"
    archiveName = "Terasology.zip"
}

task distForLauncher (type: Sync) {

    into rootDirDist
    from distPCZip

    into ("../resources/main/org/terasology/version") {
        from ("$rootDir/engine/build/classes/org/terasology/version") {
            include ('versionInfo.properties')
        }
    }
}

// Prep an IntelliJ module for the facade
idea {
    module {
        // Change around the output a bit
        inheritOutputDirs = false
        outputDir = file('build/classes')
        testOutputDir = file('build/testClasses')
    }
}

task copyEclipseLauncher(type: Copy) {
    from "$rootDir/config/eclipse"
    into projectDir
    include("Terasology.launch")
}

tasks.eclipse {
    dependsOn copyEclipseLauncher
    dependsOn rootProject.extractNatives
}

cleanEclipse.doLast {
    new File(projectDir, "Terasology.launch").delete()
}
