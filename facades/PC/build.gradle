// The PC facade is responsible for the primary distribution - a plain Java application runnable on PCs

// Grab all the common stuff like plugins to use, artifact repositories, code analysis config
apply from: "$rootDir/config/gradle/common.gradle"
apply from: "$rootDir/config/gradle/artifactory.gradle"

import org.apache.tools.ant.filters.FixCrLfFilter
import java.text.SimpleDateFormat;
import groovy.json.JsonBuilder

def dateTimeFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX")
dateTimeFormat.timeZone = TimeZone.getTimeZone("UTC")

ext {
    // Default path to store server data if running headless via Gradle
    localServerDataPath = 'terasology-server'

    // General props
    mainClassName = 'org.terasology.engine.Terasology'
    subDirLibs = 'libs'
    templatesDir = new File(rootDir, 'templates')
    rootDirDist = new File(rootDir, 'build/distributions')

    // Read environment variables, including variables passed by jenkins continuous integration server
    env = System.getenv()

    // Version related
    startDateTimeString = dateTimeFormat.format(new Date())
    versionFileName = 'VERSION'
    versionBase = new File(templatesDir, "version.txt").text.trim()
    displayVersion = versionBase
}

// Base the engine tests on the same version number as the engine
version = project(':engine').version
println "PC VERSION: $version"

// Jenkins-Artifactory integration catches on to this as part of the Maven-type descriptor
group = 'org.terasology.facades'

dependencies {
    compile project(':engine')
}

// Change the output dir
sourceSets {
    main {
        java {
            output.classesDir 'build/classes'
        }
        output.resourcesDir 'build/classes'
    }
}

// Instructions for packaging a jar file for the PC facade
jar {
    manifest {
        //TODO: Maybe later add the engine's version number into here?
        def manifestClasspath = "$subDirLibs/" + configurations.runtime.collect { it.getName() }.join(" $subDirLibs/")
        attributes("Main-Class": mainClassName, "Class-Path" : manifestClasspath, "Implementation-Title": "Terasology-" + project.name, "Implementation-Version": env.BUILD_NUMBER + ", " + env.GIT_BRANCH + ", " + env.BUILD_ID)
    }
}

// A configuration for publishing artifacts - TODO: For PC this isn't needed by anything until game distribution is a separate Jenkins job
configurations {
    published
    modules {
        transitive = false
    }
}

// Define the artifacts we want to publish (the .pom will also be included since the Maven plugin is active)
artifacts {
    published jar
    published sourceJar
}

// Technically the plain "jar" both here and above is included automatically, but leaving it explicit for clarity
artifactoryPublish {
    dependsOn jar, sourceJar
}

task runPC(type:JavaExec) {
    description = "Run 'Terasology' to play the game as a standard PC application"

    // Dependencies: natives + all modules & the PC facade itself (which will trigger the engine)
    dependsOn rootProject.extractNatives
    dependsOn rootProject.moduleClasses
    dependsOn classes

    // Run arguments
    main = mainClassName
    workingDir = rootDir
    String[] runArgs = ["-homedir"]
    args runArgs

    // Classpath: PC itself, engine classes, engine dependencies. Not modules or natives since the engine finds those
    classpath sourceSets.main.output.classesDir
    classpath project(':engine').sourceSets.main.output.classesDir
    classpath project(':engine').configurations.runtime
}

task setupServerConfig() {
    description "Parses parameters passed via Gradle and writes them to the local run-from-source server dir's config.cfg"
    
    def json = new JsonBuilder()

    def root = rootProject.file(localServerDataPath);
    root.mkdir()

    def config = new File(root, 'config.cfg')
    logger.lifecycle("Creating config file $config")

    json {
        worldGeneration {
            if (project.hasProperty('seed')) {
                logger.lifecycle("  Seed value: $seed");
                defaultSeed seed
            }
            if (project.hasProperty('worldGen')) {
                logger.lifecycle("  World Generator: $worldGen");
                defaultGenerator worldGen
            }
        }
        defaultModSelection {
            if (project.hasProperty('extraModules')) {
                logger.lifecycle("  Enabling modules: $extraModules");
                modules extraModules.tokenize(" ,")
            }
        }
    }

    config.text = json.toPrettyString()
}

task setupServerModules(type: Sync) {
    description 'Parses "extraModules" - a comma-separated list of modules and puts them into ' + localServerDataPath

    if (project.hasProperty('extraModules')) {
        // Grab modules from Artifactory - cheats by declaring them as dependencies
        extraModules.split(',').each { String module ->
            println "Extra module: " + module
            dependencies {
                modules group: 'org.terasology.modules', name: module, version: '+'
            }
        }
    }

    from(configurations.modules)
    into(new File(rootProject.file(localServerDataPath), "modules"))
}

// TODO: Make a task to reset server / game data
task startServer(type:JavaExec) {
    description "Starts a headless multiplayer server with data stored in [project-root]/$localServerDataPath"

    // Dependencies: natives + all modules & the PC facade itself (which will trigger the engine)
    dependsOn rootProject.extractNatives
    dependsOn rootProject.moduleClasses
    dependsOn classes
    dependsOn setupServerConfig
    dependsOn setupServerModules

    // Run arguments
    main = mainClassName
    workingDir = rootDir
    String[] runArgs = ["-headless", "-homedir=$localServerDataPath"]
    args runArgs

    // Classpath: PC itself, engine classes, engine dependencies. Not modules or natives since the engine finds those
    classpath sourceSets.main.output.classesDir
    classpath project(':engine').sourceSets.main.output.classesDir
    classpath project(':engine').configurations.runtime
}

// Preps a version file to bundle with PC dists. This eventually goes into the root of a zip file
task createVersionFile(type: Copy) {
    inputs.property('dateTime', startDateTimeString)
    onlyIf { env.BUILD_URL != null }
    from templatesDir
    into "$buildDir"
    include versionFileName
    expand(buildNumber: env.BUILD_NUMBER, buildUrl: env.BUILD_URL, gitBranch: env.GIT_BRANCH, dateTime: startDateTimeString, displayVersion: displayVersion)
    filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("crlf"))
}

// Main application dist target. Does NOT include any modules.
task distApp (type: Sync) {
    description = "Creates an application package for distribution"

    dependsOn createVersionFile
    dependsOn rootProject.extractNatives
    dependsOn jar

    into ("$distsDir/app")
    from ("$rootDir/README.markdown") {
        filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("crlf"))
        rename('README.markdown', 'README')
    }
    from ("$rootDir/LICENSE") {
        filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("crlf"))
    }
    from ("$rootDir/NOTICE") {
        filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("crlf"))
    }
    from ("$buildDir/libs") {
        include "*.jar"
        rename {
            'Terasology.jar'
        }
    }
    from('launchScripts') {
        exclude('*.xml')
        exclude('TeraEd.exe')
    }
    from("$buildDir/$versionFileName") {}

    into(subDirLibs) {
        from configurations.runtime
        from project(':engine').jar
    }
    into(dirNatives) {
        from "$rootDir/$dirNatives"
    }
}

// This is a TEMPORARY tweak to make "changing" dependencies always ('0') check for newer snapshots available
// TODO: Remove this when versioning and promotion works fully, then we shouldn't care about snapshots normally anyway
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

// Distribute modules - with the option to provide a list of additional modules to include as dependencies
// Note how in a local developer workspace this might grab more than Core, but in Jenkins always only Core
// Example command including additional modules: gradlew -PextraModules="Signalling,BlockNetwork"
task distModules (type: Sync) {
    description = "Prepares modules for distribution"
    //dependsOn distApp
    dependsOn rootProject.moduleJars

    // So this is probably a hack, but it works ;-) It does not work if it is in distApp, default "into" quirk ?
    into("$distsDir/app/modules")
    rootProject.terasologyModules().each {
        from "$rootDir/modules/${it.name}/build/libs"
        include "*.jar"
    }

    // If the execution was supplied with an extraModules property then include those modules as well
    if (project.hasProperty('extraModules')) {
        extraModules.split(',').each { String dependency ->
            println "Extra module: " + dependency

            // See if the supplied extra already exists in the local workspace, in that case don't add it again
            if (findProject(':modules:' + dependency) != null) {
                println "Found supplied extra $dependency already present in local workspace, ignoring"
            } else {
                dependencies {
                    // TODO: When version handling and promotion is in then we can probably remove "changing"
                    compile group: 'org.terasology.modules', name: dependency, version: '+', changing: true
                }
            }
        }

        // Note: This causes early resolution of artifacts! Can mess with order of execution/classpath and cause issues
        // Example: gradlew distApp copyModules -PextraModules="Signalling" fails due to to lacking engine on classpath
        // But the error goes away if either distApp is removed or this following statement isn't reached
        configurations.compile.resolvedConfiguration.resolvedArtifacts.each { ResolvedArtifact artifact ->
            def id = artifact.moduleVersion.id
            if (id.group == 'org.terasology.modules') {
                println "Remotely resolved $id.group - $id.name at version $id.version"
                from artifact.file
                into("$distsDir/app/modules")
            }
        }
    }
}

task distAppZip (type: Zip) {
    from "$distsDir/app"
    archiveName = "Terasology.zip"
}

task distForLauncher (type: Sync) {

    into rootDirDist
    from distAppZip

    into ("../resources/main/org/terasology/version") {
        from ("$rootDir/engine/build/classes/org/terasology/version") {
            include ('versionInfo.properties')
        }
    }
}

// Prep an IntelliJ module for the facade
idea {
    module {
        // Change around the output a bit
        inheritOutputDirs = false
        outputDir = file('build/classes')
        testOutputDir = file('build/testClasses')
    }
}

task copyEclipseLauncher(type: Copy) {
	from "$rootDir/config/eclipse"
	into projectDir
	include("Terasology.launch")
}

tasks.eclipse {
	dependsOn copyEclipseLauncher
	dependsOn rootProject.extractNatives
}

cleanEclipse.doLast {
    new File(projectDir, "Terasology.launch").delete()
}
