// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MeshData.proto

package org.terasology.protobuf;

public final class MeshData {
  private MeshData() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface DataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional string name = 16;
    boolean hasName();
    String getName();
    
    // repeated float vertices = 1 [packed = true];
    java.util.List<java.lang.Float> getVerticesList();
    int getVerticesCount();
    float getVertices(int index);
    
    // repeated float tex_coords_0 = 2 [packed = true];
    java.util.List<java.lang.Float> getTexCoords0List();
    int getTexCoords0Count();
    float getTexCoords0(int index);
    
    // repeated float tex_coords_1 = 3 [packed = true];
    java.util.List<java.lang.Float> getTexCoords1List();
    int getTexCoords1Count();
    float getTexCoords1(int index);
    
    // repeated float normals = 4 [packed = true];
    java.util.List<java.lang.Float> getNormalsList();
    int getNormalsCount();
    float getNormals(int index);
    
    // repeated float colors = 5 [packed = true];
    java.util.List<java.lang.Float> getColorsList();
    int getColorsCount();
    float getColors(int index);
    
    // repeated int32 indices = 6 [packed = true];
    java.util.List<java.lang.Integer> getIndicesList();
    int getIndicesCount();
    int getIndices(int index);
  }
  public static final class Data extends
      com.google.protobuf.GeneratedMessage
      implements DataOrBuilder {
    // Use Data.newBuilder() to construct.
    private Data(Builder builder) {
      super(builder);
    }
    private Data(boolean noInit) {}
    
    private static final Data defaultInstance;
    public static Data getDefaultInstance() {
      return defaultInstance;
    }
    
    public Data getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.terasology.protobuf.MeshData.internal_static_Data_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.terasology.protobuf.MeshData.internal_static_Data_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional string name = 16;
    public static final int NAME_FIELD_NUMBER = 16;
    private java.lang.Object name_;
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          name_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // repeated float vertices = 1 [packed = true];
    public static final int VERTICES_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Float> vertices_;
    public java.util.List<java.lang.Float>
        getVerticesList() {
      return vertices_;
    }
    public int getVerticesCount() {
      return vertices_.size();
    }
    public float getVertices(int index) {
      return vertices_.get(index);
    }
    private int verticesMemoizedSerializedSize = -1;
    
    // repeated float tex_coords_0 = 2 [packed = true];
    public static final int TEX_COORDS_0_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Float> texCoords0_;
    public java.util.List<java.lang.Float>
        getTexCoords0List() {
      return texCoords0_;
    }
    public int getTexCoords0Count() {
      return texCoords0_.size();
    }
    public float getTexCoords0(int index) {
      return texCoords0_.get(index);
    }
    private int texCoords0MemoizedSerializedSize = -1;
    
    // repeated float tex_coords_1 = 3 [packed = true];
    public static final int TEX_COORDS_1_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Float> texCoords1_;
    public java.util.List<java.lang.Float>
        getTexCoords1List() {
      return texCoords1_;
    }
    public int getTexCoords1Count() {
      return texCoords1_.size();
    }
    public float getTexCoords1(int index) {
      return texCoords1_.get(index);
    }
    private int texCoords1MemoizedSerializedSize = -1;
    
    // repeated float normals = 4 [packed = true];
    public static final int NORMALS_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Float> normals_;
    public java.util.List<java.lang.Float>
        getNormalsList() {
      return normals_;
    }
    public int getNormalsCount() {
      return normals_.size();
    }
    public float getNormals(int index) {
      return normals_.get(index);
    }
    private int normalsMemoizedSerializedSize = -1;
    
    // repeated float colors = 5 [packed = true];
    public static final int COLORS_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Float> colors_;
    public java.util.List<java.lang.Float>
        getColorsList() {
      return colors_;
    }
    public int getColorsCount() {
      return colors_.size();
    }
    public float getColors(int index) {
      return colors_.get(index);
    }
    private int colorsMemoizedSerializedSize = -1;
    
    // repeated int32 indices = 6 [packed = true];
    public static final int INDICES_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> indices_;
    public java.util.List<java.lang.Integer>
        getIndicesList() {
      return indices_;
    }
    public int getIndicesCount() {
      return indices_.size();
    }
    public int getIndices(int index) {
      return indices_.get(index);
    }
    private int indicesMemoizedSerializedSize = -1;
    
    private void initFields() {
      name_ = "";
      vertices_ = java.util.Collections.emptyList();;
      texCoords0_ = java.util.Collections.emptyList();;
      texCoords1_ = java.util.Collections.emptyList();;
      normals_ = java.util.Collections.emptyList();;
      colors_ = java.util.Collections.emptyList();;
      indices_ = java.util.Collections.emptyList();;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getVerticesList().size() > 0) {
        output.writeRawVarint32(10);
        output.writeRawVarint32(verticesMemoizedSerializedSize);
      }
      for (int i = 0; i < vertices_.size(); i++) {
        output.writeFloatNoTag(vertices_.get(i));
      }
      if (getTexCoords0List().size() > 0) {
        output.writeRawVarint32(18);
        output.writeRawVarint32(texCoords0MemoizedSerializedSize);
      }
      for (int i = 0; i < texCoords0_.size(); i++) {
        output.writeFloatNoTag(texCoords0_.get(i));
      }
      if (getTexCoords1List().size() > 0) {
        output.writeRawVarint32(26);
        output.writeRawVarint32(texCoords1MemoizedSerializedSize);
      }
      for (int i = 0; i < texCoords1_.size(); i++) {
        output.writeFloatNoTag(texCoords1_.get(i));
      }
      if (getNormalsList().size() > 0) {
        output.writeRawVarint32(34);
        output.writeRawVarint32(normalsMemoizedSerializedSize);
      }
      for (int i = 0; i < normals_.size(); i++) {
        output.writeFloatNoTag(normals_.get(i));
      }
      if (getColorsList().size() > 0) {
        output.writeRawVarint32(42);
        output.writeRawVarint32(colorsMemoizedSerializedSize);
      }
      for (int i = 0; i < colors_.size(); i++) {
        output.writeFloatNoTag(colors_.get(i));
      }
      if (getIndicesList().size() > 0) {
        output.writeRawVarint32(50);
        output.writeRawVarint32(indicesMemoizedSerializedSize);
      }
      for (int i = 0; i < indices_.size(); i++) {
        output.writeInt32NoTag(indices_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(16, getNameBytes());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      {
        int dataSize = 0;
        dataSize = 4 * getVerticesList().size();
        size += dataSize;
        if (!getVerticesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        verticesMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getTexCoords0List().size();
        size += dataSize;
        if (!getTexCoords0List().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        texCoords0MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getTexCoords1List().size();
        size += dataSize;
        if (!getTexCoords1List().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        texCoords1MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getNormalsList().size();
        size += dataSize;
        if (!getNormalsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        normalsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getColorsList().size();
        size += dataSize;
        if (!getColorsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        colorsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < indices_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(indices_.get(i));
        }
        size += dataSize;
        if (!getIndicesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        indicesMemoizedSerializedSize = dataSize;
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(16, getNameBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static org.terasology.protobuf.MeshData.Data parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.terasology.protobuf.MeshData.Data parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.terasology.protobuf.MeshData.Data parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.terasology.protobuf.MeshData.Data parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.terasology.protobuf.MeshData.Data parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.terasology.protobuf.MeshData.Data parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.terasology.protobuf.MeshData.Data parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.terasology.protobuf.MeshData.Data parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.terasology.protobuf.MeshData.Data parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.terasology.protobuf.MeshData.Data parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.terasology.protobuf.MeshData.Data prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.terasology.protobuf.MeshData.DataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.terasology.protobuf.MeshData.internal_static_Data_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.terasology.protobuf.MeshData.internal_static_Data_fieldAccessorTable;
      }
      
      // Construct using org.terasology.protobuf.MeshData.Data.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        vertices_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000002);
        texCoords0_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000004);
        texCoords1_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000008);
        normals_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000010);
        colors_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000020);
        indices_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.terasology.protobuf.MeshData.Data.getDescriptor();
      }
      
      public org.terasology.protobuf.MeshData.Data getDefaultInstanceForType() {
        return org.terasology.protobuf.MeshData.Data.getDefaultInstance();
      }
      
      public org.terasology.protobuf.MeshData.Data build() {
        org.terasology.protobuf.MeshData.Data result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private org.terasology.protobuf.MeshData.Data buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        org.terasology.protobuf.MeshData.Data result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public org.terasology.protobuf.MeshData.Data buildPartial() {
        org.terasology.protobuf.MeshData.Data result = new org.terasology.protobuf.MeshData.Data(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          vertices_ = java.util.Collections.unmodifiableList(vertices_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.vertices_ = vertices_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          texCoords0_ = java.util.Collections.unmodifiableList(texCoords0_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.texCoords0_ = texCoords0_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          texCoords1_ = java.util.Collections.unmodifiableList(texCoords1_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.texCoords1_ = texCoords1_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          normals_ = java.util.Collections.unmodifiableList(normals_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.normals_ = normals_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          colors_ = java.util.Collections.unmodifiableList(colors_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.colors_ = colors_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          indices_ = java.util.Collections.unmodifiableList(indices_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.indices_ = indices_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.terasology.protobuf.MeshData.Data) {
          return mergeFrom((org.terasology.protobuf.MeshData.Data)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(org.terasology.protobuf.MeshData.Data other) {
        if (other == org.terasology.protobuf.MeshData.Data.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        if (!other.vertices_.isEmpty()) {
          if (vertices_.isEmpty()) {
            vertices_ = other.vertices_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureVerticesIsMutable();
            vertices_.addAll(other.vertices_);
          }
          onChanged();
        }
        if (!other.texCoords0_.isEmpty()) {
          if (texCoords0_.isEmpty()) {
            texCoords0_ = other.texCoords0_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureTexCoords0IsMutable();
            texCoords0_.addAll(other.texCoords0_);
          }
          onChanged();
        }
        if (!other.texCoords1_.isEmpty()) {
          if (texCoords1_.isEmpty()) {
            texCoords1_ = other.texCoords1_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTexCoords1IsMutable();
            texCoords1_.addAll(other.texCoords1_);
          }
          onChanged();
        }
        if (!other.normals_.isEmpty()) {
          if (normals_.isEmpty()) {
            normals_ = other.normals_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureNormalsIsMutable();
            normals_.addAll(other.normals_);
          }
          onChanged();
        }
        if (!other.colors_.isEmpty()) {
          if (colors_.isEmpty()) {
            colors_ = other.colors_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureColorsIsMutable();
            colors_.addAll(other.colors_);
          }
          onChanged();
        }
        if (!other.indices_.isEmpty()) {
          if (indices_.isEmpty()) {
            indices_ = other.indices_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureIndicesIsMutable();
            indices_.addAll(other.indices_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 13: {
              ensureVerticesIsMutable();
              vertices_.add(input.readFloat());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addVertices(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 21: {
              ensureTexCoords0IsMutable();
              texCoords0_.add(input.readFloat());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addTexCoords0(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 29: {
              ensureTexCoords1IsMutable();
              texCoords1_.add(input.readFloat());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addTexCoords1(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 37: {
              ensureNormalsIsMutable();
              normals_.add(input.readFloat());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addNormals(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 45: {
              ensureColorsIsMutable();
              colors_.add(input.readFloat());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addColors(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              ensureIndicesIsMutable();
              indices_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addIndices(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 130: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional string name = 16;
      private java.lang.Object name_ = "";
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setName(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      void setName(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
      }
      
      // repeated float vertices = 1 [packed = true];
      private java.util.List<java.lang.Float> vertices_ = java.util.Collections.emptyList();;
      private void ensureVerticesIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          vertices_ = new java.util.ArrayList<java.lang.Float>(vertices_);
          bitField0_ |= 0x00000002;
         }
      }
      public java.util.List<java.lang.Float>
          getVerticesList() {
        return java.util.Collections.unmodifiableList(vertices_);
      }
      public int getVerticesCount() {
        return vertices_.size();
      }
      public float getVertices(int index) {
        return vertices_.get(index);
      }
      public Builder setVertices(
          int index, float value) {
        ensureVerticesIsMutable();
        vertices_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addVertices(float value) {
        ensureVerticesIsMutable();
        vertices_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllVertices(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureVerticesIsMutable();
        super.addAll(values, vertices_);
        onChanged();
        return this;
      }
      public Builder clearVertices() {
        vertices_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      
      // repeated float tex_coords_0 = 2 [packed = true];
      private java.util.List<java.lang.Float> texCoords0_ = java.util.Collections.emptyList();;
      private void ensureTexCoords0IsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          texCoords0_ = new java.util.ArrayList<java.lang.Float>(texCoords0_);
          bitField0_ |= 0x00000004;
         }
      }
      public java.util.List<java.lang.Float>
          getTexCoords0List() {
        return java.util.Collections.unmodifiableList(texCoords0_);
      }
      public int getTexCoords0Count() {
        return texCoords0_.size();
      }
      public float getTexCoords0(int index) {
        return texCoords0_.get(index);
      }
      public Builder setTexCoords0(
          int index, float value) {
        ensureTexCoords0IsMutable();
        texCoords0_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addTexCoords0(float value) {
        ensureTexCoords0IsMutable();
        texCoords0_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllTexCoords0(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureTexCoords0IsMutable();
        super.addAll(values, texCoords0_);
        onChanged();
        return this;
      }
      public Builder clearTexCoords0() {
        texCoords0_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      
      // repeated float tex_coords_1 = 3 [packed = true];
      private java.util.List<java.lang.Float> texCoords1_ = java.util.Collections.emptyList();;
      private void ensureTexCoords1IsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          texCoords1_ = new java.util.ArrayList<java.lang.Float>(texCoords1_);
          bitField0_ |= 0x00000008;
         }
      }
      public java.util.List<java.lang.Float>
          getTexCoords1List() {
        return java.util.Collections.unmodifiableList(texCoords1_);
      }
      public int getTexCoords1Count() {
        return texCoords1_.size();
      }
      public float getTexCoords1(int index) {
        return texCoords1_.get(index);
      }
      public Builder setTexCoords1(
          int index, float value) {
        ensureTexCoords1IsMutable();
        texCoords1_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addTexCoords1(float value) {
        ensureTexCoords1IsMutable();
        texCoords1_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllTexCoords1(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureTexCoords1IsMutable();
        super.addAll(values, texCoords1_);
        onChanged();
        return this;
      }
      public Builder clearTexCoords1() {
        texCoords1_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      
      // repeated float normals = 4 [packed = true];
      private java.util.List<java.lang.Float> normals_ = java.util.Collections.emptyList();;
      private void ensureNormalsIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          normals_ = new java.util.ArrayList<java.lang.Float>(normals_);
          bitField0_ |= 0x00000010;
         }
      }
      public java.util.List<java.lang.Float>
          getNormalsList() {
        return java.util.Collections.unmodifiableList(normals_);
      }
      public int getNormalsCount() {
        return normals_.size();
      }
      public float getNormals(int index) {
        return normals_.get(index);
      }
      public Builder setNormals(
          int index, float value) {
        ensureNormalsIsMutable();
        normals_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addNormals(float value) {
        ensureNormalsIsMutable();
        normals_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllNormals(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureNormalsIsMutable();
        super.addAll(values, normals_);
        onChanged();
        return this;
      }
      public Builder clearNormals() {
        normals_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      
      // repeated float colors = 5 [packed = true];
      private java.util.List<java.lang.Float> colors_ = java.util.Collections.emptyList();;
      private void ensureColorsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          colors_ = new java.util.ArrayList<java.lang.Float>(colors_);
          bitField0_ |= 0x00000020;
         }
      }
      public java.util.List<java.lang.Float>
          getColorsList() {
        return java.util.Collections.unmodifiableList(colors_);
      }
      public int getColorsCount() {
        return colors_.size();
      }
      public float getColors(int index) {
        return colors_.get(index);
      }
      public Builder setColors(
          int index, float value) {
        ensureColorsIsMutable();
        colors_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addColors(float value) {
        ensureColorsIsMutable();
        colors_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllColors(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureColorsIsMutable();
        super.addAll(values, colors_);
        onChanged();
        return this;
      }
      public Builder clearColors() {
        colors_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      
      // repeated int32 indices = 6 [packed = true];
      private java.util.List<java.lang.Integer> indices_ = java.util.Collections.emptyList();;
      private void ensureIndicesIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          indices_ = new java.util.ArrayList<java.lang.Integer>(indices_);
          bitField0_ |= 0x00000040;
         }
      }
      public java.util.List<java.lang.Integer>
          getIndicesList() {
        return java.util.Collections.unmodifiableList(indices_);
      }
      public int getIndicesCount() {
        return indices_.size();
      }
      public int getIndices(int index) {
        return indices_.get(index);
      }
      public Builder setIndices(
          int index, int value) {
        ensureIndicesIsMutable();
        indices_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addIndices(int value) {
        ensureIndicesIsMutable();
        indices_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllIndices(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureIndicesIsMutable();
        super.addAll(values, indices_);
        onChanged();
        return this;
      }
      public Builder clearIndices() {
        indices_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:Data)
    }
    
    static {
      defaultInstance = new Data(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:Data)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Data_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Data_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016MeshData.proto\"\234\001\n\004Data\022\014\n\004name\030\020 \001(\t\022" +
      "\024\n\010vertices\030\001 \003(\002B\002\020\001\022\030\n\014tex_coords_0\030\002 " +
      "\003(\002B\002\020\001\022\030\n\014tex_coords_1\030\003 \003(\002B\002\020\001\022\023\n\007nor" +
      "mals\030\004 \003(\002B\002\020\001\022\022\n\006colors\030\005 \003(\002B\002\020\001\022\023\n\007in" +
      "dices\030\006 \003(\005B\002\020\001B%\n\027org.terasology.protob" +
      "ufB\010MeshDataH\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_Data_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_Data_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Data_descriptor,
              new java.lang.String[] { "Name", "Vertices", "TexCoords0", "TexCoords1", "Normals", "Colors", "Indices", },
              org.terasology.protobuf.MeshData.Data.class,
              org.terasology.protobuf.MeshData.Data.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
